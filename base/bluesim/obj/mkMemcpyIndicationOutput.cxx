/*
 * Generated by Bluespec Compiler (build 7d25cde)
 * 
 * On Sun Feb  4 22:37:05 EST 2024
 * 
 */
#include "bluesim_primitives.h"
#include "mkMemcpyIndicationOutput.h"


/* Constructor */
MOD_mkMemcpyIndicationOutput::MOD_mkMemcpyIndicationOutput(tSimStateHdl simHdl,
							   char const *name,
							   Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_indicationPipes(simHdl, "indicationPipes", this),
    PORT_RST_N((tUInt8)1u)
{
  symbol_count = 1u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkMemcpyIndicationOutput::init_symbols_0()
{
  init_symbol(&symbols[0u], "indicationPipes", SYM_MODULE, &INST_indicationPipes);
}


/* Rule actions */


/* Methods */

tUInt32 MOD_mkMemcpyIndicationOutput::METH_portalIfc_messageSize_size(tUInt32 ARG_portalIfc_messageSize_size_methodNumber)
{
  tUInt32 PORT_portalIfc_messageSize_size;
  PORT_portalIfc_messageSize_size = INST_indicationPipes.METH_portalIfc_messageSize_size(ARG_portalIfc_messageSize_size_methodNumber);
  return PORT_portalIfc_messageSize_size;
}

tUInt8 MOD_mkMemcpyIndicationOutput::METH_RDY_portalIfc_messageSize_size()
{
  tUInt8 DEF_CAN_FIRE_portalIfc_messageSize_size;
  tUInt8 PORT_RDY_portalIfc_messageSize_size;
  DEF_CAN_FIRE_portalIfc_messageSize_size = (tUInt8)1u;
  PORT_RDY_portalIfc_messageSize_size = DEF_CAN_FIRE_portalIfc_messageSize_size;
  return PORT_RDY_portalIfc_messageSize_size;
}

tUInt32 MOD_mkMemcpyIndicationOutput::METH_portalIfc_indications_0_first()
{
  tUInt32 PORT_portalIfc_indications_0_first;
  PORT_portalIfc_indications_0_first = INST_indicationPipes.METH_portalIfc_indications_0_first();
  return PORT_portalIfc_indications_0_first;
}

tUInt8 MOD_mkMemcpyIndicationOutput::METH_RDY_portalIfc_indications_0_first()
{
  tUInt8 DEF_CAN_FIRE_portalIfc_indications_0_first;
  tUInt8 PORT_RDY_portalIfc_indications_0_first;
  DEF_CAN_FIRE_portalIfc_indications_0_first = INST_indicationPipes.METH_RDY_portalIfc_indications_0_first();
  PORT_RDY_portalIfc_indications_0_first = DEF_CAN_FIRE_portalIfc_indications_0_first;
  return PORT_RDY_portalIfc_indications_0_first;
}

void MOD_mkMemcpyIndicationOutput::METH_portalIfc_indications_0_deq()
{
  INST_indicationPipes.METH_portalIfc_indications_0_deq();
}

tUInt8 MOD_mkMemcpyIndicationOutput::METH_RDY_portalIfc_indications_0_deq()
{
  tUInt8 DEF_CAN_FIRE_portalIfc_indications_0_deq;
  tUInt8 PORT_RDY_portalIfc_indications_0_deq;
  DEF_CAN_FIRE_portalIfc_indications_0_deq = INST_indicationPipes.METH_RDY_portalIfc_indications_0_deq();
  PORT_RDY_portalIfc_indications_0_deq = DEF_CAN_FIRE_portalIfc_indications_0_deq;
  return PORT_RDY_portalIfc_indications_0_deq;
}

tUInt8 MOD_mkMemcpyIndicationOutput::METH_portalIfc_indications_0_notEmpty()
{
  tUInt8 PORT_portalIfc_indications_0_notEmpty;
  PORT_portalIfc_indications_0_notEmpty = INST_indicationPipes.METH_portalIfc_indications_0_notEmpty();
  return PORT_portalIfc_indications_0_notEmpty;
}

tUInt8 MOD_mkMemcpyIndicationOutput::METH_RDY_portalIfc_indications_0_notEmpty()
{
  tUInt8 DEF_CAN_FIRE_portalIfc_indications_0_notEmpty;
  tUInt8 PORT_RDY_portalIfc_indications_0_notEmpty;
  DEF_CAN_FIRE_portalIfc_indications_0_notEmpty = (tUInt8)1u;
  PORT_RDY_portalIfc_indications_0_notEmpty = DEF_CAN_FIRE_portalIfc_indications_0_notEmpty;
  return PORT_RDY_portalIfc_indications_0_notEmpty;
}

tUInt32 MOD_mkMemcpyIndicationOutput::METH_portalIfc_indications_1_first()
{
  tUInt32 PORT_portalIfc_indications_1_first;
  PORT_portalIfc_indications_1_first = INST_indicationPipes.METH_portalIfc_indications_1_first();
  return PORT_portalIfc_indications_1_first;
}

tUInt8 MOD_mkMemcpyIndicationOutput::METH_RDY_portalIfc_indications_1_first()
{
  tUInt8 DEF_CAN_FIRE_portalIfc_indications_1_first;
  tUInt8 PORT_RDY_portalIfc_indications_1_first;
  DEF_CAN_FIRE_portalIfc_indications_1_first = INST_indicationPipes.METH_RDY_portalIfc_indications_1_first();
  PORT_RDY_portalIfc_indications_1_first = DEF_CAN_FIRE_portalIfc_indications_1_first;
  return PORT_RDY_portalIfc_indications_1_first;
}

void MOD_mkMemcpyIndicationOutput::METH_portalIfc_indications_1_deq()
{
  INST_indicationPipes.METH_portalIfc_indications_1_deq();
}

tUInt8 MOD_mkMemcpyIndicationOutput::METH_RDY_portalIfc_indications_1_deq()
{
  tUInt8 DEF_CAN_FIRE_portalIfc_indications_1_deq;
  tUInt8 PORT_RDY_portalIfc_indications_1_deq;
  DEF_CAN_FIRE_portalIfc_indications_1_deq = INST_indicationPipes.METH_RDY_portalIfc_indications_1_deq();
  PORT_RDY_portalIfc_indications_1_deq = DEF_CAN_FIRE_portalIfc_indications_1_deq;
  return PORT_RDY_portalIfc_indications_1_deq;
}

tUInt8 MOD_mkMemcpyIndicationOutput::METH_portalIfc_indications_1_notEmpty()
{
  tUInt8 PORT_portalIfc_indications_1_notEmpty;
  PORT_portalIfc_indications_1_notEmpty = INST_indicationPipes.METH_portalIfc_indications_1_notEmpty();
  return PORT_portalIfc_indications_1_notEmpty;
}

tUInt8 MOD_mkMemcpyIndicationOutput::METH_RDY_portalIfc_indications_1_notEmpty()
{
  tUInt8 DEF_CAN_FIRE_portalIfc_indications_1_notEmpty;
  tUInt8 PORT_RDY_portalIfc_indications_1_notEmpty;
  DEF_CAN_FIRE_portalIfc_indications_1_notEmpty = (tUInt8)1u;
  PORT_RDY_portalIfc_indications_1_notEmpty = DEF_CAN_FIRE_portalIfc_indications_1_notEmpty;
  return PORT_RDY_portalIfc_indications_1_notEmpty;
}

tUInt8 MOD_mkMemcpyIndicationOutput::METH_portalIfc_intr_status()
{
  tUInt8 PORT_portalIfc_intr_status;
  PORT_portalIfc_intr_status = INST_indicationPipes.METH_portalIfc_intr_status();
  return PORT_portalIfc_intr_status;
}

tUInt8 MOD_mkMemcpyIndicationOutput::METH_RDY_portalIfc_intr_status()
{
  tUInt8 DEF_CAN_FIRE_portalIfc_intr_status;
  tUInt8 PORT_RDY_portalIfc_intr_status;
  DEF_CAN_FIRE_portalIfc_intr_status = (tUInt8)1u;
  PORT_RDY_portalIfc_intr_status = DEF_CAN_FIRE_portalIfc_intr_status;
  return PORT_RDY_portalIfc_intr_status;
}

tUInt32 MOD_mkMemcpyIndicationOutput::METH_portalIfc_intr_channel()
{
  tUInt32 PORT_portalIfc_intr_channel;
  PORT_portalIfc_intr_channel = INST_indicationPipes.METH_portalIfc_intr_channel();
  return PORT_portalIfc_intr_channel;
}

tUInt8 MOD_mkMemcpyIndicationOutput::METH_RDY_portalIfc_intr_channel()
{
  tUInt8 DEF_CAN_FIRE_portalIfc_intr_channel;
  tUInt8 PORT_RDY_portalIfc_intr_channel;
  DEF_CAN_FIRE_portalIfc_intr_channel = (tUInt8)1u;
  PORT_RDY_portalIfc_intr_channel = DEF_CAN_FIRE_portalIfc_intr_channel;
  return PORT_RDY_portalIfc_intr_channel;
}

void MOD_mkMemcpyIndicationOutput::METH_ifc_started()
{
  INST_indicationPipes.METH_methods_started_enq(0u);
}

tUInt8 MOD_mkMemcpyIndicationOutput::METH_RDY_ifc_started()
{
  tUInt8 DEF_CAN_FIRE_ifc_started;
  tUInt8 PORT_RDY_ifc_started;
  DEF_CAN_FIRE_ifc_started = INST_indicationPipes.METH_RDY_methods_started_enq();
  PORT_RDY_ifc_started = DEF_CAN_FIRE_ifc_started;
  return PORT_RDY_ifc_started;
}

void MOD_mkMemcpyIndicationOutput::METH_ifc_done()
{
  INST_indicationPipes.METH_methods_done_enq(0u);
}

tUInt8 MOD_mkMemcpyIndicationOutput::METH_RDY_ifc_done()
{
  tUInt8 DEF_CAN_FIRE_ifc_done;
  tUInt8 PORT_RDY_ifc_done;
  DEF_CAN_FIRE_ifc_done = INST_indicationPipes.METH_RDY_methods_done_enq();
  PORT_RDY_ifc_done = DEF_CAN_FIRE_ifc_done;
  return PORT_RDY_ifc_done;
}


/* Reset routines */

void MOD_mkMemcpyIndicationOutput::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_indicationPipes.reset_RST_N(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkMemcpyIndicationOutput::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkMemcpyIndicationOutput::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_indicationPipes.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkMemcpyIndicationOutput::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 1u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  if (levels != 1u)
  {
    unsigned int l = levels == 0u ? 0u : levels - 1u;
    num = INST_indicationPipes.dump_VCD_defs(l);
  }
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkMemcpyIndicationOutput::dump_VCD(tVCDDumpType dt,
					    unsigned int levels,
					    MOD_mkMemcpyIndicationOutput &backing)
{
  vcd_defs(dt, backing);
  if (levels != 1u)
    vcd_submodules(dt, levels - 1u, backing);
}

void MOD_mkMemcpyIndicationOutput::vcd_defs(tVCDDumpType dt, MOD_mkMemcpyIndicationOutput &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
    }
}

void MOD_mkMemcpyIndicationOutput::vcd_submodules(tVCDDumpType dt,
						  unsigned int levels,
						  MOD_mkMemcpyIndicationOutput &backing)
{
  INST_indicationPipes.dump_VCD(dt, levels, backing.INST_indicationPipes);
}
