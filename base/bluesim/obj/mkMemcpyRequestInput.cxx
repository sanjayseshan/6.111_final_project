/*
 * Generated by Bluespec Compiler (build 7d25cde)
 * 
 * On Sun Feb  4 22:37:05 EST 2024
 * 
 */
#include "bluesim_primitives.h"
#include "mkMemcpyRequestInput.h"


/* Literal declarations */
static unsigned int const UWide_literal_160_h0_arr[] = { 0u, 0u, 0u, 0u, 0u };
static tUWide const UWide_literal_160_h0(160u, UWide_literal_160_h0_arr);


/* Constructor */
MOD_mkMemcpyRequestInput::MOD_mkMemcpyRequestInput(tSimStateHdl simHdl,
						   char const *name,
						   Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_startCopy_requestAdapter_count(simHdl,
					"startCopy_requestAdapter_count",
					this,
					3u,
					(tUInt8)0u,
					(tUInt8)0u),
    INST_startCopy_requestAdapter_fbnbuff(simHdl,
					  "startCopy_requestAdapter_fbnbuff",
					  this,
					  160u,
					  UWide_literal_160_h0,
					  (tUInt8)0u),
    INST_startCopy_requestAdapter_fifo(simHdl,
				       "startCopy_requestAdapter_fifo",
				       this,
				       160u,
				       1u,
				       (tUInt8)1u,
				       0u),
    PORT_RST_N((tUInt8)1u),
    DEF__read__h60(160u),
    DEF__read_BITS_127_TO_0___h354(128u),
    DEF_newbuff__h329(160u)
{
  PORT_pipes_startCopy_PipeOut_first.setSize(160u);
  PORT_pipes_startCopy_PipeOut_first.clear();
  symbol_count = 5u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkMemcpyRequestInput::init_symbols_0()
{
  init_symbol(&symbols[0u], "_read__h96", SYM_DEF, &DEF__read__h96, 3u);
  init_symbol(&symbols[1u],
	      "pipes_startCopy_PipeOut_first",
	      SYM_PORT,
	      &PORT_pipes_startCopy_PipeOut_first,
	      160u);
  init_symbol(&symbols[2u],
	      "startCopy_requestAdapter_count",
	      SYM_MODULE,
	      &INST_startCopy_requestAdapter_count);
  init_symbol(&symbols[3u],
	      "startCopy_requestAdapter_fbnbuff",
	      SYM_MODULE,
	      &INST_startCopy_requestAdapter_fbnbuff);
  init_symbol(&symbols[4u],
	      "startCopy_requestAdapter_fifo",
	      SYM_MODULE,
	      &INST_startCopy_requestAdapter_fifo);
}


/* Rule actions */


/* Methods */

tUInt32 MOD_mkMemcpyRequestInput::METH_portalIfc_messageSize_size(tUInt32 ARG_portalIfc_messageSize_size_methodNumber)
{
  tUInt32 PORT_portalIfc_messageSize_size;
  PORT_portalIfc_messageSize_size = 160u;
  return PORT_portalIfc_messageSize_size;
}

tUInt8 MOD_mkMemcpyRequestInput::METH_RDY_portalIfc_messageSize_size()
{
  tUInt8 DEF_CAN_FIRE_portalIfc_messageSize_size;
  tUInt8 PORT_RDY_portalIfc_messageSize_size;
  DEF_CAN_FIRE_portalIfc_messageSize_size = (tUInt8)1u;
  PORT_RDY_portalIfc_messageSize_size = DEF_CAN_FIRE_portalIfc_messageSize_size;
  return PORT_RDY_portalIfc_messageSize_size;
}

tUInt8 MOD_mkMemcpyRequestInput::METH_portalIfc_intr_status()
{
  tUInt8 PORT_portalIfc_intr_status;
  PORT_portalIfc_intr_status = (tUInt8)0u;
  return PORT_portalIfc_intr_status;
}

tUInt8 MOD_mkMemcpyRequestInput::METH_RDY_portalIfc_intr_status()
{
  tUInt8 DEF_CAN_FIRE_portalIfc_intr_status;
  tUInt8 PORT_RDY_portalIfc_intr_status;
  DEF_CAN_FIRE_portalIfc_intr_status = (tUInt8)1u;
  PORT_RDY_portalIfc_intr_status = DEF_CAN_FIRE_portalIfc_intr_status;
  return PORT_RDY_portalIfc_intr_status;
}

tUInt32 MOD_mkMemcpyRequestInput::METH_portalIfc_intr_channel()
{
  tUInt32 PORT_portalIfc_intr_channel;
  PORT_portalIfc_intr_channel = 4294967295u;
  return PORT_portalIfc_intr_channel;
}

tUInt8 MOD_mkMemcpyRequestInput::METH_RDY_portalIfc_intr_channel()
{
  tUInt8 DEF_CAN_FIRE_portalIfc_intr_channel;
  tUInt8 PORT_RDY_portalIfc_intr_channel;
  DEF_CAN_FIRE_portalIfc_intr_channel = (tUInt8)1u;
  PORT_RDY_portalIfc_intr_channel = DEF_CAN_FIRE_portalIfc_intr_channel;
  return PORT_RDY_portalIfc_intr_channel;
}

void MOD_mkMemcpyRequestInput::METH_portalIfc_requests_0_enq(tUInt32 ARG_portalIfc_requests_0_enq_v)
{
  tUInt8 DEF_x__h364;
  tUInt8 DEF_IF_startCopy_requestAdapter_count_EQ_4_THEN_0__ETC___d7;
  DEF__read__h60 = INST_startCopy_requestAdapter_fbnbuff.METH_read();
  DEF__read__h96 = INST_startCopy_requestAdapter_count.METH_read();
  wop_primExtractWide(128u, 160u, DEF__read__h60, 32u, 127u, 32u, 0u, DEF__read_BITS_127_TO_0___h354);
  DEF_startCopy_requestAdapter_count_EQ_4___d5 = DEF__read__h96 == (tUInt8)4u;
  DEF_x__h364 = (tUInt8)7u & (DEF__read__h96 + (tUInt8)1u);
  DEF_IF_startCopy_requestAdapter_count_EQ_4_THEN_0__ETC___d7 = DEF_startCopy_requestAdapter_count_EQ_4___d5 ? (tUInt8)0u : DEF_x__h364;
  DEF_newbuff__h329.set_whole_word(DEF__read_BITS_127_TO_0___h354.get_whole_word(3u),
				   4u).set_whole_word(DEF__read_BITS_127_TO_0___h354.get_whole_word(2u),
						      3u).set_whole_word(DEF__read_BITS_127_TO_0___h354.get_whole_word(1u),
									 2u).build_concat((((tUInt64)(DEF__read_BITS_127_TO_0___h354.get_whole_word(0u))) << 32u) | (tUInt64)(ARG_portalIfc_requests_0_enq_v),
											  0u,
											  64u);
  INST_startCopy_requestAdapter_fbnbuff.METH_write(DEF_newbuff__h329);
  INST_startCopy_requestAdapter_count.METH_write(DEF_IF_startCopy_requestAdapter_count_EQ_4_THEN_0__ETC___d7);
  if (DEF_startCopy_requestAdapter_count_EQ_4___d5)
    INST_startCopy_requestAdapter_fifo.METH_enq(DEF_newbuff__h329);
}

tUInt8 MOD_mkMemcpyRequestInput::METH_RDY_portalIfc_requests_0_enq()
{
  tUInt8 DEF_CAN_FIRE_portalIfc_requests_0_enq;
  tUInt8 PORT_RDY_portalIfc_requests_0_enq;
  DEF__read__h96 = INST_startCopy_requestAdapter_count.METH_read();
  DEF_startCopy_requestAdapter_fifo_notFull____d9 = INST_startCopy_requestAdapter_fifo.METH_notFull();
  DEF_startCopy_requestAdapter_count_EQ_4___d5 = DEF__read__h96 == (tUInt8)4u;
  DEF_CAN_FIRE_portalIfc_requests_0_enq = (DEF__read__h96 < (tUInt8)4u || DEF_startCopy_requestAdapter_fifo_notFull____d9) && (!DEF_startCopy_requestAdapter_count_EQ_4___d5 || INST_startCopy_requestAdapter_fifo.METH_i_notFull());
  PORT_RDY_portalIfc_requests_0_enq = DEF_CAN_FIRE_portalIfc_requests_0_enq;
  return PORT_RDY_portalIfc_requests_0_enq;
}

tUInt8 MOD_mkMemcpyRequestInput::METH_portalIfc_requests_0_notFull()
{
  tUInt8 PORT_portalIfc_requests_0_notFull;
  DEF_startCopy_requestAdapter_fifo_notFull____d9 = INST_startCopy_requestAdapter_fifo.METH_notFull();
  PORT_portalIfc_requests_0_notFull = DEF_startCopy_requestAdapter_fifo_notFull____d9;
  return PORT_portalIfc_requests_0_notFull;
}

tUInt8 MOD_mkMemcpyRequestInput::METH_RDY_portalIfc_requests_0_notFull()
{
  tUInt8 DEF_CAN_FIRE_portalIfc_requests_0_notFull;
  tUInt8 PORT_RDY_portalIfc_requests_0_notFull;
  DEF_CAN_FIRE_portalIfc_requests_0_notFull = (tUInt8)1u;
  PORT_RDY_portalIfc_requests_0_notFull = DEF_CAN_FIRE_portalIfc_requests_0_notFull;
  return PORT_RDY_portalIfc_requests_0_notFull;
}

tUWide MOD_mkMemcpyRequestInput::METH_pipes_startCopy_PipeOut_first()
{
  PORT_pipes_startCopy_PipeOut_first = INST_startCopy_requestAdapter_fifo.METH_first();
  return PORT_pipes_startCopy_PipeOut_first;
}

tUInt8 MOD_mkMemcpyRequestInput::METH_RDY_pipes_startCopy_PipeOut_first()
{
  tUInt8 DEF_CAN_FIRE_pipes_startCopy_PipeOut_first;
  tUInt8 PORT_RDY_pipes_startCopy_PipeOut_first;
  DEF_startCopy_requestAdapter_fifo_i_notEmpty____d14 = INST_startCopy_requestAdapter_fifo.METH_i_notEmpty();
  DEF_CAN_FIRE_pipes_startCopy_PipeOut_first = DEF_startCopy_requestAdapter_fifo_i_notEmpty____d14;
  PORT_RDY_pipes_startCopy_PipeOut_first = DEF_CAN_FIRE_pipes_startCopy_PipeOut_first;
  return PORT_RDY_pipes_startCopy_PipeOut_first;
}

void MOD_mkMemcpyRequestInput::METH_pipes_startCopy_PipeOut_deq()
{
  INST_startCopy_requestAdapter_fifo.METH_deq();
}

tUInt8 MOD_mkMemcpyRequestInput::METH_RDY_pipes_startCopy_PipeOut_deq()
{
  tUInt8 DEF_CAN_FIRE_pipes_startCopy_PipeOut_deq;
  tUInt8 PORT_RDY_pipes_startCopy_PipeOut_deq;
  DEF_startCopy_requestAdapter_fifo_i_notEmpty____d14 = INST_startCopy_requestAdapter_fifo.METH_i_notEmpty();
  DEF_CAN_FIRE_pipes_startCopy_PipeOut_deq = DEF_startCopy_requestAdapter_fifo_i_notEmpty____d14;
  PORT_RDY_pipes_startCopy_PipeOut_deq = DEF_CAN_FIRE_pipes_startCopy_PipeOut_deq;
  return PORT_RDY_pipes_startCopy_PipeOut_deq;
}

tUInt8 MOD_mkMemcpyRequestInput::METH_pipes_startCopy_PipeOut_notEmpty()
{
  tUInt8 PORT_pipes_startCopy_PipeOut_notEmpty;
  PORT_pipes_startCopy_PipeOut_notEmpty = INST_startCopy_requestAdapter_fifo.METH_notEmpty();
  return PORT_pipes_startCopy_PipeOut_notEmpty;
}

tUInt8 MOD_mkMemcpyRequestInput::METH_RDY_pipes_startCopy_PipeOut_notEmpty()
{
  tUInt8 DEF_CAN_FIRE_pipes_startCopy_PipeOut_notEmpty;
  tUInt8 PORT_RDY_pipes_startCopy_PipeOut_notEmpty;
  DEF_CAN_FIRE_pipes_startCopy_PipeOut_notEmpty = (tUInt8)1u;
  PORT_RDY_pipes_startCopy_PipeOut_notEmpty = DEF_CAN_FIRE_pipes_startCopy_PipeOut_notEmpty;
  return PORT_RDY_pipes_startCopy_PipeOut_notEmpty;
}


/* Reset routines */

void MOD_mkMemcpyRequestInput::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_startCopy_requestAdapter_fifo.reset_RST(ARG_rst_in);
  INST_startCopy_requestAdapter_fbnbuff.reset_RST(ARG_rst_in);
  INST_startCopy_requestAdapter_count.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkMemcpyRequestInput::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkMemcpyRequestInput::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_startCopy_requestAdapter_count.dump_state(indent + 2u);
  INST_startCopy_requestAdapter_fbnbuff.dump_state(indent + 2u);
  INST_startCopy_requestAdapter_fifo.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkMemcpyRequestInput::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 12u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "_read_BITS_127_TO_0___h354", 128u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "_read__h60", 160u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "_read__h96", 3u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "newbuff__h329", 160u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "startCopy_requestAdapter_count_EQ_4___d5", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "startCopy_requestAdapter_fifo_i_notEmpty____d14", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "startCopy_requestAdapter_fifo_notFull____d9", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "pipes_startCopy_PipeOut_first", 160u);
  num = INST_startCopy_requestAdapter_count.dump_VCD_defs(num);
  num = INST_startCopy_requestAdapter_fbnbuff.dump_VCD_defs(num);
  num = INST_startCopy_requestAdapter_fifo.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkMemcpyRequestInput::dump_VCD(tVCDDumpType dt,
					unsigned int levels,
					MOD_mkMemcpyRequestInput &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkMemcpyRequestInput::vcd_defs(tVCDDumpType dt, MOD_mkMemcpyRequestInput &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 128u);
    vcd_write_x(sim_hdl, num++, 160u);
    vcd_write_x(sim_hdl, num++, 3u);
    vcd_write_x(sim_hdl, num++, 160u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 160u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF__read_BITS_127_TO_0___h354) != DEF__read_BITS_127_TO_0___h354)
      {
	vcd_write_val(sim_hdl, num, DEF__read_BITS_127_TO_0___h354, 128u);
	backing.DEF__read_BITS_127_TO_0___h354 = DEF__read_BITS_127_TO_0___h354;
      }
      ++num;
      if ((backing.DEF__read__h60) != DEF__read__h60)
      {
	vcd_write_val(sim_hdl, num, DEF__read__h60, 160u);
	backing.DEF__read__h60 = DEF__read__h60;
      }
      ++num;
      if ((backing.DEF__read__h96) != DEF__read__h96)
      {
	vcd_write_val(sim_hdl, num, DEF__read__h96, 3u);
	backing.DEF__read__h96 = DEF__read__h96;
      }
      ++num;
      if ((backing.DEF_newbuff__h329) != DEF_newbuff__h329)
      {
	vcd_write_val(sim_hdl, num, DEF_newbuff__h329, 160u);
	backing.DEF_newbuff__h329 = DEF_newbuff__h329;
      }
      ++num;
      if ((backing.DEF_startCopy_requestAdapter_count_EQ_4___d5) != DEF_startCopy_requestAdapter_count_EQ_4___d5)
      {
	vcd_write_val(sim_hdl, num, DEF_startCopy_requestAdapter_count_EQ_4___d5, 1u);
	backing.DEF_startCopy_requestAdapter_count_EQ_4___d5 = DEF_startCopy_requestAdapter_count_EQ_4___d5;
      }
      ++num;
      if ((backing.DEF_startCopy_requestAdapter_fifo_i_notEmpty____d14) != DEF_startCopy_requestAdapter_fifo_i_notEmpty____d14)
      {
	vcd_write_val(sim_hdl, num, DEF_startCopy_requestAdapter_fifo_i_notEmpty____d14, 1u);
	backing.DEF_startCopy_requestAdapter_fifo_i_notEmpty____d14 = DEF_startCopy_requestAdapter_fifo_i_notEmpty____d14;
      }
      ++num;
      if ((backing.DEF_startCopy_requestAdapter_fifo_notFull____d9) != DEF_startCopy_requestAdapter_fifo_notFull____d9)
      {
	vcd_write_val(sim_hdl, num, DEF_startCopy_requestAdapter_fifo_notFull____d9, 1u);
	backing.DEF_startCopy_requestAdapter_fifo_notFull____d9 = DEF_startCopy_requestAdapter_fifo_notFull____d9;
      }
      ++num;
      if ((backing.PORT_pipes_startCopy_PipeOut_first) != PORT_pipes_startCopy_PipeOut_first)
      {
	vcd_write_val(sim_hdl, num, PORT_pipes_startCopy_PipeOut_first, 160u);
	backing.PORT_pipes_startCopy_PipeOut_first = PORT_pipes_startCopy_PipeOut_first;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF__read_BITS_127_TO_0___h354, 128u);
      backing.DEF__read_BITS_127_TO_0___h354 = DEF__read_BITS_127_TO_0___h354;
      vcd_write_val(sim_hdl, num++, DEF__read__h60, 160u);
      backing.DEF__read__h60 = DEF__read__h60;
      vcd_write_val(sim_hdl, num++, DEF__read__h96, 3u);
      backing.DEF__read__h96 = DEF__read__h96;
      vcd_write_val(sim_hdl, num++, DEF_newbuff__h329, 160u);
      backing.DEF_newbuff__h329 = DEF_newbuff__h329;
      vcd_write_val(sim_hdl, num++, DEF_startCopy_requestAdapter_count_EQ_4___d5, 1u);
      backing.DEF_startCopy_requestAdapter_count_EQ_4___d5 = DEF_startCopy_requestAdapter_count_EQ_4___d5;
      vcd_write_val(sim_hdl, num++, DEF_startCopy_requestAdapter_fifo_i_notEmpty____d14, 1u);
      backing.DEF_startCopy_requestAdapter_fifo_i_notEmpty____d14 = DEF_startCopy_requestAdapter_fifo_i_notEmpty____d14;
      vcd_write_val(sim_hdl, num++, DEF_startCopy_requestAdapter_fifo_notFull____d9, 1u);
      backing.DEF_startCopy_requestAdapter_fifo_notFull____d9 = DEF_startCopy_requestAdapter_fifo_notFull____d9;
      vcd_write_val(sim_hdl, num++, PORT_pipes_startCopy_PipeOut_first, 160u);
      backing.PORT_pipes_startCopy_PipeOut_first = PORT_pipes_startCopy_PipeOut_first;
    }
}

void MOD_mkMemcpyRequestInput::vcd_prims(tVCDDumpType dt, MOD_mkMemcpyRequestInput &backing)
{
  INST_startCopy_requestAdapter_count.dump_VCD(dt, backing.INST_startCopy_requestAdapter_count);
  INST_startCopy_requestAdapter_fbnbuff.dump_VCD(dt, backing.INST_startCopy_requestAdapter_fbnbuff);
  INST_startCopy_requestAdapter_fifo.dump_VCD(dt, backing.INST_startCopy_requestAdapter_fifo);
}
