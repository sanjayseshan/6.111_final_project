/*
 * Generated by Bluespec Compiler (build 7d25cde)
 * 
 * On Sun Feb  4 22:37:05 EST 2024
 * 
 */
#include "bluesim_primitives.h"
#include "mkMemcpyIndicationOutputPipes.h"


/* Constructor */
MOD_mkMemcpyIndicationOutputPipes::MOD_mkMemcpyIndicationOutputPipes(tSimStateHdl simHdl,
								     char const *name,
								     Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_done_responseAdapter_bits(simHdl, "done_responseAdapter_bits", this, 32u, 0u, (tUInt8)0u),
    INST_done_responseAdapter_notEmptyReg(simHdl,
					  "done_responseAdapter_notEmptyReg",
					  this,
					  1u,
					  (tUInt8)0u,
					  (tUInt8)0u),
    INST_done_responseAdapter_shift(simHdl,
				    "done_responseAdapter_shift",
				    this,
				    6u,
				    (tUInt8)0u,
				    (tUInt8)0u),
    INST_started_responseAdapter_bits(simHdl,
				      "started_responseAdapter_bits",
				      this,
				      32u,
				      0u,
				      (tUInt8)0u),
    INST_started_responseAdapter_notEmptyReg(simHdl,
					     "started_responseAdapter_notEmptyReg",
					     this,
					     1u,
					     (tUInt8)0u,
					     (tUInt8)0u),
    INST_started_responseAdapter_shift(simHdl,
				       "started_responseAdapter_shift",
				       this,
				       6u,
				       (tUInt8)0u,
				       (tUInt8)0u),
    PORT_RST_N((tUInt8)1u)
{
  symbol_count = 8u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkMemcpyIndicationOutputPipes::init_symbols_0()
{
  init_symbol(&symbols[0u], "done_responseAdapter_bits", SYM_MODULE, &INST_done_responseAdapter_bits);
  init_symbol(&symbols[1u],
	      "done_responseAdapter_notEmptyReg",
	      SYM_MODULE,
	      &INST_done_responseAdapter_notEmptyReg);
  init_symbol(&symbols[2u],
	      "done_responseAdapter_notEmptyReg__h385",
	      SYM_DEF,
	      &DEF_done_responseAdapter_notEmptyReg__h385,
	      1u);
  init_symbol(&symbols[3u],
	      "done_responseAdapter_shift",
	      SYM_MODULE,
	      &INST_done_responseAdapter_shift);
  init_symbol(&symbols[4u],
	      "started_responseAdapter_bits",
	      SYM_MODULE,
	      &INST_started_responseAdapter_bits);
  init_symbol(&symbols[5u],
	      "started_responseAdapter_notEmptyReg",
	      SYM_MODULE,
	      &INST_started_responseAdapter_notEmptyReg);
  init_symbol(&symbols[6u],
	      "started_responseAdapter_notEmptyReg__h336",
	      SYM_DEF,
	      &DEF_started_responseAdapter_notEmptyReg__h336,
	      1u);
  init_symbol(&symbols[7u],
	      "started_responseAdapter_shift",
	      SYM_MODULE,
	      &INST_started_responseAdapter_shift);
}


/* Rule actions */


/* Methods */

tUInt32 MOD_mkMemcpyIndicationOutputPipes::METH_portalIfc_messageSize_size(tUInt32 ARG_portalIfc_messageSize_size_methodNumber)
{
  tUInt32 PORT_portalIfc_messageSize_size;
  PORT_portalIfc_messageSize_size = 32u;
  return PORT_portalIfc_messageSize_size;
}

tUInt8 MOD_mkMemcpyIndicationOutputPipes::METH_RDY_portalIfc_messageSize_size()
{
  tUInt8 DEF_CAN_FIRE_portalIfc_messageSize_size;
  tUInt8 PORT_RDY_portalIfc_messageSize_size;
  DEF_CAN_FIRE_portalIfc_messageSize_size = (tUInt8)1u;
  PORT_RDY_portalIfc_messageSize_size = DEF_CAN_FIRE_portalIfc_messageSize_size;
  return PORT_RDY_portalIfc_messageSize_size;
}

void MOD_mkMemcpyIndicationOutputPipes::METH_methods_started_enq(tUInt32 ARG_methods_started_enq_v)
{
  INST_started_responseAdapter_bits.METH_write(ARG_methods_started_enq_v);
  INST_started_responseAdapter_notEmptyReg.METH_write((tUInt8)1u);
}

tUInt8 MOD_mkMemcpyIndicationOutputPipes::METH_RDY_methods_started_enq()
{
  tUInt8 DEF_CAN_FIRE_methods_started_enq;
  tUInt8 PORT_RDY_methods_started_enq;
  DEF_started_responseAdapter_notEmptyReg__h336 = INST_started_responseAdapter_notEmptyReg.METH_read();
  DEF_NOT_started_responseAdapter_notEmptyReg___d2 = !DEF_started_responseAdapter_notEmptyReg__h336;
  DEF_CAN_FIRE_methods_started_enq = DEF_NOT_started_responseAdapter_notEmptyReg___d2;
  PORT_RDY_methods_started_enq = DEF_CAN_FIRE_methods_started_enq;
  return PORT_RDY_methods_started_enq;
}

tUInt8 MOD_mkMemcpyIndicationOutputPipes::METH_methods_started_notFull()
{
  tUInt8 PORT_methods_started_notFull;
  DEF_started_responseAdapter_notEmptyReg__h336 = INST_started_responseAdapter_notEmptyReg.METH_read();
  DEF_NOT_started_responseAdapter_notEmptyReg___d2 = !DEF_started_responseAdapter_notEmptyReg__h336;
  PORT_methods_started_notFull = DEF_NOT_started_responseAdapter_notEmptyReg___d2;
  return PORT_methods_started_notFull;
}

tUInt8 MOD_mkMemcpyIndicationOutputPipes::METH_RDY_methods_started_notFull()
{
  tUInt8 DEF_CAN_FIRE_methods_started_notFull;
  tUInt8 PORT_RDY_methods_started_notFull;
  DEF_CAN_FIRE_methods_started_notFull = (tUInt8)1u;
  PORT_RDY_methods_started_notFull = DEF_CAN_FIRE_methods_started_notFull;
  return PORT_RDY_methods_started_notFull;
}

void MOD_mkMemcpyIndicationOutputPipes::METH_methods_done_enq(tUInt32 ARG_methods_done_enq_v)
{
  INST_done_responseAdapter_bits.METH_write(ARG_methods_done_enq_v);
  INST_done_responseAdapter_notEmptyReg.METH_write((tUInt8)1u);
}

tUInt8 MOD_mkMemcpyIndicationOutputPipes::METH_RDY_methods_done_enq()
{
  tUInt8 DEF_CAN_FIRE_methods_done_enq;
  tUInt8 PORT_RDY_methods_done_enq;
  DEF_done_responseAdapter_notEmptyReg__h385 = INST_done_responseAdapter_notEmptyReg.METH_read();
  DEF_NOT_done_responseAdapter_notEmptyReg___d4 = !DEF_done_responseAdapter_notEmptyReg__h385;
  DEF_CAN_FIRE_methods_done_enq = DEF_NOT_done_responseAdapter_notEmptyReg___d4;
  PORT_RDY_methods_done_enq = DEF_CAN_FIRE_methods_done_enq;
  return PORT_RDY_methods_done_enq;
}

tUInt8 MOD_mkMemcpyIndicationOutputPipes::METH_methods_done_notFull()
{
  tUInt8 PORT_methods_done_notFull;
  DEF_done_responseAdapter_notEmptyReg__h385 = INST_done_responseAdapter_notEmptyReg.METH_read();
  DEF_NOT_done_responseAdapter_notEmptyReg___d4 = !DEF_done_responseAdapter_notEmptyReg__h385;
  PORT_methods_done_notFull = DEF_NOT_done_responseAdapter_notEmptyReg___d4;
  return PORT_methods_done_notFull;
}

tUInt8 MOD_mkMemcpyIndicationOutputPipes::METH_RDY_methods_done_notFull()
{
  tUInt8 DEF_CAN_FIRE_methods_done_notFull;
  tUInt8 PORT_RDY_methods_done_notFull;
  DEF_CAN_FIRE_methods_done_notFull = (tUInt8)1u;
  PORT_RDY_methods_done_notFull = DEF_CAN_FIRE_methods_done_notFull;
  return PORT_RDY_methods_done_notFull;
}

tUInt32 MOD_mkMemcpyIndicationOutputPipes::METH_portalIfc_indications_0_first()
{
  tUInt32 PORT_portalIfc_indications_0_first;
  PORT_portalIfc_indications_0_first = INST_started_responseAdapter_bits.METH_read();
  return PORT_portalIfc_indications_0_first;
}

tUInt8 MOD_mkMemcpyIndicationOutputPipes::METH_RDY_portalIfc_indications_0_first()
{
  tUInt8 DEF_CAN_FIRE_portalIfc_indications_0_first;
  tUInt8 PORT_RDY_portalIfc_indications_0_first;
  DEF_started_responseAdapter_notEmptyReg__h336 = INST_started_responseAdapter_notEmptyReg.METH_read();
  DEF_CAN_FIRE_portalIfc_indications_0_first = DEF_started_responseAdapter_notEmptyReg__h336;
  PORT_RDY_portalIfc_indications_0_first = DEF_CAN_FIRE_portalIfc_indications_0_first;
  return PORT_RDY_portalIfc_indications_0_first;
}

void MOD_mkMemcpyIndicationOutputPipes::METH_portalIfc_indications_0_deq()
{
  INST_started_responseAdapter_notEmptyReg.METH_write((tUInt8)0u);
}

tUInt8 MOD_mkMemcpyIndicationOutputPipes::METH_RDY_portalIfc_indications_0_deq()
{
  tUInt8 DEF_CAN_FIRE_portalIfc_indications_0_deq;
  tUInt8 PORT_RDY_portalIfc_indications_0_deq;
  DEF_started_responseAdapter_notEmptyReg__h336 = INST_started_responseAdapter_notEmptyReg.METH_read();
  DEF_CAN_FIRE_portalIfc_indications_0_deq = DEF_started_responseAdapter_notEmptyReg__h336;
  PORT_RDY_portalIfc_indications_0_deq = DEF_CAN_FIRE_portalIfc_indications_0_deq;
  return PORT_RDY_portalIfc_indications_0_deq;
}

tUInt8 MOD_mkMemcpyIndicationOutputPipes::METH_portalIfc_indications_0_notEmpty()
{
  tUInt8 PORT_portalIfc_indications_0_notEmpty;
  DEF_started_responseAdapter_notEmptyReg__h336 = INST_started_responseAdapter_notEmptyReg.METH_read();
  PORT_portalIfc_indications_0_notEmpty = DEF_started_responseAdapter_notEmptyReg__h336;
  return PORT_portalIfc_indications_0_notEmpty;
}

tUInt8 MOD_mkMemcpyIndicationOutputPipes::METH_RDY_portalIfc_indications_0_notEmpty()
{
  tUInt8 DEF_CAN_FIRE_portalIfc_indications_0_notEmpty;
  tUInt8 PORT_RDY_portalIfc_indications_0_notEmpty;
  DEF_CAN_FIRE_portalIfc_indications_0_notEmpty = (tUInt8)1u;
  PORT_RDY_portalIfc_indications_0_notEmpty = DEF_CAN_FIRE_portalIfc_indications_0_notEmpty;
  return PORT_RDY_portalIfc_indications_0_notEmpty;
}

tUInt32 MOD_mkMemcpyIndicationOutputPipes::METH_portalIfc_indications_1_first()
{
  tUInt32 PORT_portalIfc_indications_1_first;
  PORT_portalIfc_indications_1_first = INST_done_responseAdapter_bits.METH_read();
  return PORT_portalIfc_indications_1_first;
}

tUInt8 MOD_mkMemcpyIndicationOutputPipes::METH_RDY_portalIfc_indications_1_first()
{
  tUInt8 DEF_CAN_FIRE_portalIfc_indications_1_first;
  tUInt8 PORT_RDY_portalIfc_indications_1_first;
  DEF_done_responseAdapter_notEmptyReg__h385 = INST_done_responseAdapter_notEmptyReg.METH_read();
  DEF_CAN_FIRE_portalIfc_indications_1_first = DEF_done_responseAdapter_notEmptyReg__h385;
  PORT_RDY_portalIfc_indications_1_first = DEF_CAN_FIRE_portalIfc_indications_1_first;
  return PORT_RDY_portalIfc_indications_1_first;
}

void MOD_mkMemcpyIndicationOutputPipes::METH_portalIfc_indications_1_deq()
{
  INST_done_responseAdapter_notEmptyReg.METH_write((tUInt8)0u);
}

tUInt8 MOD_mkMemcpyIndicationOutputPipes::METH_RDY_portalIfc_indications_1_deq()
{
  tUInt8 DEF_CAN_FIRE_portalIfc_indications_1_deq;
  tUInt8 PORT_RDY_portalIfc_indications_1_deq;
  DEF_done_responseAdapter_notEmptyReg__h385 = INST_done_responseAdapter_notEmptyReg.METH_read();
  DEF_CAN_FIRE_portalIfc_indications_1_deq = DEF_done_responseAdapter_notEmptyReg__h385;
  PORT_RDY_portalIfc_indications_1_deq = DEF_CAN_FIRE_portalIfc_indications_1_deq;
  return PORT_RDY_portalIfc_indications_1_deq;
}

tUInt8 MOD_mkMemcpyIndicationOutputPipes::METH_portalIfc_indications_1_notEmpty()
{
  tUInt8 PORT_portalIfc_indications_1_notEmpty;
  DEF_done_responseAdapter_notEmptyReg__h385 = INST_done_responseAdapter_notEmptyReg.METH_read();
  PORT_portalIfc_indications_1_notEmpty = DEF_done_responseAdapter_notEmptyReg__h385;
  return PORT_portalIfc_indications_1_notEmpty;
}

tUInt8 MOD_mkMemcpyIndicationOutputPipes::METH_RDY_portalIfc_indications_1_notEmpty()
{
  tUInt8 DEF_CAN_FIRE_portalIfc_indications_1_notEmpty;
  tUInt8 PORT_RDY_portalIfc_indications_1_notEmpty;
  DEF_CAN_FIRE_portalIfc_indications_1_notEmpty = (tUInt8)1u;
  PORT_RDY_portalIfc_indications_1_notEmpty = DEF_CAN_FIRE_portalIfc_indications_1_notEmpty;
  return PORT_RDY_portalIfc_indications_1_notEmpty;
}

tUInt8 MOD_mkMemcpyIndicationOutputPipes::METH_portalIfc_intr_status()
{
  tUInt8 PORT_portalIfc_intr_status;
  DEF_done_responseAdapter_notEmptyReg__h385 = INST_done_responseAdapter_notEmptyReg.METH_read();
  DEF_started_responseAdapter_notEmptyReg__h336 = INST_started_responseAdapter_notEmptyReg.METH_read();
  PORT_portalIfc_intr_status = DEF_started_responseAdapter_notEmptyReg__h336 || DEF_done_responseAdapter_notEmptyReg__h385;
  return PORT_portalIfc_intr_status;
}

tUInt8 MOD_mkMemcpyIndicationOutputPipes::METH_RDY_portalIfc_intr_status()
{
  tUInt8 DEF_CAN_FIRE_portalIfc_intr_status;
  tUInt8 PORT_RDY_portalIfc_intr_status;
  DEF_CAN_FIRE_portalIfc_intr_status = (tUInt8)1u;
  PORT_RDY_portalIfc_intr_status = DEF_CAN_FIRE_portalIfc_intr_status;
  return PORT_RDY_portalIfc_intr_status;
}

tUInt32 MOD_mkMemcpyIndicationOutputPipes::METH_portalIfc_intr_channel()
{
  tUInt32 DEF_IF_done_responseAdapter_notEmptyReg_THEN_1_ELS_ETC___d5;
  tUInt32 PORT_portalIfc_intr_channel;
  DEF_done_responseAdapter_notEmptyReg__h385 = INST_done_responseAdapter_notEmptyReg.METH_read();
  DEF_started_responseAdapter_notEmptyReg__h336 = INST_started_responseAdapter_notEmptyReg.METH_read();
  DEF_IF_done_responseAdapter_notEmptyReg_THEN_1_ELS_ETC___d5 = DEF_done_responseAdapter_notEmptyReg__h385 ? 1u : 4294967295u;
  PORT_portalIfc_intr_channel = DEF_started_responseAdapter_notEmptyReg__h336 ? 0u : DEF_IF_done_responseAdapter_notEmptyReg_THEN_1_ELS_ETC___d5;
  return PORT_portalIfc_intr_channel;
}

tUInt8 MOD_mkMemcpyIndicationOutputPipes::METH_RDY_portalIfc_intr_channel()
{
  tUInt8 DEF_CAN_FIRE_portalIfc_intr_channel;
  tUInt8 PORT_RDY_portalIfc_intr_channel;
  DEF_CAN_FIRE_portalIfc_intr_channel = (tUInt8)1u;
  PORT_RDY_portalIfc_intr_channel = DEF_CAN_FIRE_portalIfc_intr_channel;
  return PORT_RDY_portalIfc_intr_channel;
}


/* Reset routines */

void MOD_mkMemcpyIndicationOutputPipes::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_started_responseAdapter_shift.reset_RST(ARG_rst_in);
  INST_started_responseAdapter_notEmptyReg.reset_RST(ARG_rst_in);
  INST_started_responseAdapter_bits.reset_RST(ARG_rst_in);
  INST_done_responseAdapter_shift.reset_RST(ARG_rst_in);
  INST_done_responseAdapter_notEmptyReg.reset_RST(ARG_rst_in);
  INST_done_responseAdapter_bits.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkMemcpyIndicationOutputPipes::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkMemcpyIndicationOutputPipes::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_done_responseAdapter_bits.dump_state(indent + 2u);
  INST_done_responseAdapter_notEmptyReg.dump_state(indent + 2u);
  INST_done_responseAdapter_shift.dump_state(indent + 2u);
  INST_started_responseAdapter_bits.dump_state(indent + 2u);
  INST_started_responseAdapter_notEmptyReg.dump_state(indent + 2u);
  INST_started_responseAdapter_shift.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkMemcpyIndicationOutputPipes::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 11u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "NOT_done_responseAdapter_notEmptyReg___d4", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "NOT_started_responseAdapter_notEmptyReg___d2", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "done_responseAdapter_notEmptyReg__h385", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "started_responseAdapter_notEmptyReg__h336", 1u);
  num = INST_done_responseAdapter_bits.dump_VCD_defs(num);
  num = INST_done_responseAdapter_notEmptyReg.dump_VCD_defs(num);
  num = INST_done_responseAdapter_shift.dump_VCD_defs(num);
  num = INST_started_responseAdapter_bits.dump_VCD_defs(num);
  num = INST_started_responseAdapter_notEmptyReg.dump_VCD_defs(num);
  num = INST_started_responseAdapter_shift.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkMemcpyIndicationOutputPipes::dump_VCD(tVCDDumpType dt,
						 unsigned int levels,
						 MOD_mkMemcpyIndicationOutputPipes &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkMemcpyIndicationOutputPipes::vcd_defs(tVCDDumpType dt,
						 MOD_mkMemcpyIndicationOutputPipes &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.DEF_NOT_done_responseAdapter_notEmptyReg___d4) != DEF_NOT_done_responseAdapter_notEmptyReg___d4)
      {
	vcd_write_val(sim_hdl, num, DEF_NOT_done_responseAdapter_notEmptyReg___d4, 1u);
	backing.DEF_NOT_done_responseAdapter_notEmptyReg___d4 = DEF_NOT_done_responseAdapter_notEmptyReg___d4;
      }
      ++num;
      if ((backing.DEF_NOT_started_responseAdapter_notEmptyReg___d2) != DEF_NOT_started_responseAdapter_notEmptyReg___d2)
      {
	vcd_write_val(sim_hdl, num, DEF_NOT_started_responseAdapter_notEmptyReg___d2, 1u);
	backing.DEF_NOT_started_responseAdapter_notEmptyReg___d2 = DEF_NOT_started_responseAdapter_notEmptyReg___d2;
      }
      ++num;
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_done_responseAdapter_notEmptyReg__h385) != DEF_done_responseAdapter_notEmptyReg__h385)
      {
	vcd_write_val(sim_hdl, num, DEF_done_responseAdapter_notEmptyReg__h385, 1u);
	backing.DEF_done_responseAdapter_notEmptyReg__h385 = DEF_done_responseAdapter_notEmptyReg__h385;
      }
      ++num;
      if ((backing.DEF_started_responseAdapter_notEmptyReg__h336) != DEF_started_responseAdapter_notEmptyReg__h336)
      {
	vcd_write_val(sim_hdl, num, DEF_started_responseAdapter_notEmptyReg__h336, 1u);
	backing.DEF_started_responseAdapter_notEmptyReg__h336 = DEF_started_responseAdapter_notEmptyReg__h336;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, DEF_NOT_done_responseAdapter_notEmptyReg___d4, 1u);
      backing.DEF_NOT_done_responseAdapter_notEmptyReg___d4 = DEF_NOT_done_responseAdapter_notEmptyReg___d4;
      vcd_write_val(sim_hdl, num++, DEF_NOT_started_responseAdapter_notEmptyReg___d2, 1u);
      backing.DEF_NOT_started_responseAdapter_notEmptyReg___d2 = DEF_NOT_started_responseAdapter_notEmptyReg___d2;
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_done_responseAdapter_notEmptyReg__h385, 1u);
      backing.DEF_done_responseAdapter_notEmptyReg__h385 = DEF_done_responseAdapter_notEmptyReg__h385;
      vcd_write_val(sim_hdl, num++, DEF_started_responseAdapter_notEmptyReg__h336, 1u);
      backing.DEF_started_responseAdapter_notEmptyReg__h336 = DEF_started_responseAdapter_notEmptyReg__h336;
    }
}

void MOD_mkMemcpyIndicationOutputPipes::vcd_prims(tVCDDumpType dt,
						  MOD_mkMemcpyIndicationOutputPipes &backing)
{
  INST_done_responseAdapter_bits.dump_VCD(dt, backing.INST_done_responseAdapter_bits);
  INST_done_responseAdapter_notEmptyReg.dump_VCD(dt, backing.INST_done_responseAdapter_notEmptyReg);
  INST_done_responseAdapter_shift.dump_VCD(dt, backing.INST_done_responseAdapter_shift);
  INST_started_responseAdapter_bits.dump_VCD(dt, backing.INST_started_responseAdapter_bits);
  INST_started_responseAdapter_notEmptyReg.dump_VCD(dt,
						    backing.INST_started_responseAdapter_notEmptyReg);
  INST_started_responseAdapter_shift.dump_VCD(dt, backing.INST_started_responseAdapter_shift);
}
