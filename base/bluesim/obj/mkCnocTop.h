/*
 * Generated by Bluespec Compiler (build 7d25cde)
 * 
 * On Sun Feb  4 22:37:05 EST 2024
 * 
 */

/* Generation options: */
#ifndef __mkCnocTop_h__
#define __mkCnocTop_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"
#include "mkMemcpyIndicationOutput.h"
#include "mkMemcpyRequestInput.h"


/* Class declaration for the mkCnocTop module */
class MOD_mkCnocTop : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_mkMemcpyIndicationOutput INST_lMemcpyIndicationOutput;
  MOD_Reg<tUInt8> INST_lMemcpyIndicationOutputNoc_bpState;
  MOD_Fifo<tUInt32> INST_lMemcpyIndicationOutputNoc_fifoMsgSource;
  MOD_Reg<tUInt32> INST_lMemcpyIndicationOutputNoc_messageWordsReg;
  MOD_Reg<tUInt8> INST_lMemcpyIndicationOutputNoc_methodIdReg;
  MOD_mkMemcpyRequestInput INST_lMemcpyRequestInput;
  MOD_Reg<tUInt8> INST_lMemcpyRequestInputNoc_bpState;
  MOD_Fifo<tUInt32> INST_lMemcpyRequestInputNoc_fifoMsgSink;
  MOD_Reg<tUInt8> INST_lMemcpyRequestInputNoc_messageWordsReg;
  MOD_Reg<tUInt8> INST_lMemcpyRequestInputNoc_methodIdReg;
  MOD_BRAM<tUInt32,tUInt64,tUInt8> INST_lMemcpy_buffer_memory;
  MOD_Wire<tUInt8> INST_lMemcpy_buffer_pwClear;
  MOD_Wire<tUInt8> INST_lMemcpy_buffer_pwDequeue;
  MOD_Wire<tUInt8> INST_lMemcpy_buffer_pwEnqueue;
  MOD_Reg<tUWide> INST_lMemcpy_buffer_rCache;
  MOD_ConfigReg<tUInt32> INST_lMemcpy_buffer_rRdPtr;
  MOD_ConfigReg<tUInt32> INST_lMemcpy_buffer_rWrPtr;
  MOD_Wire<tUInt64> INST_lMemcpy_buffer_wDataIn;
  MOD_Wire<tUInt64> INST_lMemcpy_buffer_wDataOut;
  MOD_Reg<tUInt32> INST_lMemcpy_burstLen;
  MOD_Reg<tUInt32> INST_lMemcpy_numWords;
  MOD_Reg<tUInt32> INST_lMemcpy_rdIterCnt;
  MOD_Reg<tUInt32> INST_lMemcpy_rdPointer;
  MOD_Fifo<tUWide> INST_lMemcpy_re_dataPipes_dataFifos_0;
  MOD_Reg<tUInt32> INST_lMemcpy_re_readChannels_0_clientAvail_cnt;
  MOD_Wire<tUInt32> INST_lMemcpy_re_readChannels_0_clientAvail_dec_wire;
  MOD_Wire<tUInt32> INST_lMemcpy_re_readChannels_0_clientAvail_inc_wire;
  MOD_Reg<tUInt8> INST_lMemcpy_re_readChannels_0_clientAvail_positive_reg;
  MOD_Reg<tUInt32> INST_lMemcpy_re_readChannels_0_clientBase;
  MOD_Reg<tUWide> INST_lMemcpy_re_readChannels_0_clientCommand;
  MOD_Counter<tUInt32> INST_lMemcpy_re_readChannels_0_clientCycles;
  MOD_Fifo<tUInt64> INST_lMemcpy_re_readChannels_0_clientCyclesFifo;
  MOD_BRAM<tUInt32,tUWide,tUInt8> INST_lMemcpy_re_readChannels_0_clientDataFifo_memory;
  MOD_Wire<tUInt8> INST_lMemcpy_re_readChannels_0_clientDataFifo_pwClear;
  MOD_Wire<tUInt8> INST_lMemcpy_re_readChannels_0_clientDataFifo_pwDequeue;
  MOD_Wire<tUInt8> INST_lMemcpy_re_readChannels_0_clientDataFifo_pwEnqueue;
  MOD_Reg<tUWide> INST_lMemcpy_re_readChannels_0_clientDataFifo_rCache;
  MOD_ConfigReg<tUInt32> INST_lMemcpy_re_readChannels_0_clientDataFifo_rRdPtr;
  MOD_ConfigReg<tUInt32> INST_lMemcpy_re_readChannels_0_clientDataFifo_rWrPtr;
  MOD_Wire<tUWide> INST_lMemcpy_re_readChannels_0_clientDataFifo_wDataIn;
  MOD_Wire<tUWide> INST_lMemcpy_re_readChannels_0_clientDataFifo_wDataOut;
  MOD_Reg<tUInt8> INST_lMemcpy_re_readChannels_0_clientInFlight;
  MOD_Reg<tUInt32> INST_lMemcpy_re_readChannels_0_clientLen;
  MOD_Reg<tUInt32> INST_lMemcpy_re_readChannels_0_clientNext;
  MOD_Fifo<tUWide> INST_lMemcpy_re_readChannels_0_clientRequest;
  MOD_Reg<tUInt32> INST_lMemcpy_re_readChannels_0_counter;
  MOD_Fifo<tUWide> INST_lMemcpy_re_readChannels_0_dmaRequest;
  MOD_Reg<tUInt32> INST_lMemcpy_re_readChannels_0_respCnt;
  MOD_Fifo<tUInt32> INST_lMemcpy_re_readChannels_0_serverCheckAvail;
  MOD_Fifo<tUWide> INST_lMemcpy_re_readChannels_0_serverDataFifo;
  MOD_Fifo<tUInt32> INST_lMemcpy_re_readChannels_0_serverProcessing;
  MOD_Fifo<tUWide> INST_lMemcpy_re_readDataFifo;
  MOD_Fifo<tUInt8> INST_lMemcpy_re_readtagFifos_0;
  MOD_Fifo<tUWide> INST_lMemcpy_re_reqFifo;
  MOD_Fifo<tUInt8> INST_lMemcpy_we_arbFifos_0;
  MOD_Fifo<tUInt8> INST_lMemcpy_we_channelQ;
  MOD_Fifo<tUInt8> INST_lMemcpy_we_doneFifos_0;
  MOD_Reg<tUInt8> INST_lMemcpy_we_reqInFlight;
  MOD_Reg<tUInt8> INST_lMemcpy_we_reqNotDone;
  MOD_Reg<tUInt32> INST_lMemcpy_we_writeChannels_clientAvail_cnt;
  MOD_Wire<tUInt32> INST_lMemcpy_we_writeChannels_clientAvail_dec_wire;
  MOD_Wire<tUInt32> INST_lMemcpy_we_writeChannels_clientAvail_inc_wire;
  MOD_Reg<tUInt8> INST_lMemcpy_we_writeChannels_clientAvail_positive_reg;
  MOD_Fifo<tUWide> INST_lMemcpy_we_writeChannels_clientCommand;
  MOD_Fifo<tUInt64> INST_lMemcpy_we_writeChannels_clientCyclesFifo;
  MOD_Fifo<tUInt32> INST_lMemcpy_we_writeChannels_clientCyclesFifoStart;
  MOD_Fifo<tUInt8> INST_lMemcpy_we_writeChannels_clientFinished;
  MOD_Reg<tUInt32> INST_lMemcpy_we_writeChannels_cycles;
  MOD_BRAM<tUInt32,tUInt64,tUInt8> INST_lMemcpy_we_writeChannels_dataBuffer_memory;
  MOD_Wire<tUInt8> INST_lMemcpy_we_writeChannels_dataBuffer_pwClear;
  MOD_Wire<tUInt8> INST_lMemcpy_we_writeChannels_dataBuffer_pwDequeue;
  MOD_Wire<tUInt8> INST_lMemcpy_we_writeChannels_dataBuffer_pwEnqueue;
  MOD_Reg<tUWide> INST_lMemcpy_we_writeChannels_dataBuffer_rCache;
  MOD_ConfigReg<tUInt32> INST_lMemcpy_we_writeChannels_dataBuffer_rRdPtr;
  MOD_ConfigReg<tUInt32> INST_lMemcpy_we_writeChannels_dataBuffer_rWrPtr;
  MOD_Wire<tUInt64> INST_lMemcpy_we_writeChannels_dataBuffer_wDataIn;
  MOD_Wire<tUInt64> INST_lMemcpy_we_writeChannels_dataBuffer_wDataOut;
  MOD_Fifo<tUInt32> INST_lMemcpy_we_writeChannels_inProgress;
  MOD_Reg<tUInt32> INST_lMemcpy_we_writeChannels_lenCnt;
  MOD_Reg<tUInt32> INST_lMemcpy_we_writeChannels_respCnt;
  MOD_Fifo<tUInt32> INST_lMemcpy_we_writeChannels_serverDone;
  MOD_Fifo<tUWide> INST_lMemcpy_we_writeChannels_writeDataFifo;
  MOD_Fifo<tUWide> INST_lMemcpy_we_writeChannels_writeReqFifo;
  MOD_Fifo<tUWide> INST_lMemcpy_we_writeDataFifo;
  MOD_Fifo<tUInt8> INST_lMemcpy_we_writeDoneFifo;
  MOD_Fifo<tUWide> INST_lMemcpy_we_writeReqFifo;
  MOD_Reg<tUInt32> INST_lMemcpy_wrIterCnt;
  MOD_Reg<tUInt32> INST_lMemcpy_wrPointer;
 
 /* Constructor */
 public:
  MOD_mkCnocTop(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
  tUWide PORT_readers_1_readData_put;
  tUWide PORT_readers_0_readData_put;
  tUWide PORT_writers_1_writeData_get;
  tUWide PORT_writers_1_writeReq_get;
  tUWide PORT_writers_0_writeData_get;
  tUWide PORT_writers_0_writeReq_get;
  tUWide PORT_readers_1_readReq_get;
  tUWide PORT_readers_0_readReq_get;
 
 /* Publicly accessible definitions */
 public:
  tUInt8 DEF_lMemcpyIndicationOutputNoc_fifoMsgSource_i_not_ETC___d440;
  tUInt8 DEF_NOT_0_CONCAT_lMemcpy_burstLen_94_BITS_7_TO_0_9_ETC___d299;
  tUInt8 DEF_NOT_0_CONCAT_lMemcpy_burstLen_94_BITS_7_TO_0_9_ETC___d323;
  tUWide DEF_lMemcpy_we_writeChannels_writeDataFifo_first____d250;
  tUInt32 DEF__read__h8821;
  tUInt32 DEF_x__h10347;
  tUInt32 DEF_x__h10036;
  tUInt32 DEF_lMemcpy_we_writeChannels_inProgress_first____d212;
  tUInt32 DEF_lMemcpy_we_writeChannels_serverDone_first____d230;
  tUInt32 DEF_lMemcpy_re_readChannels_0_serverCheckAvail_first____d82;
  tUInt32 DEF_x__h6872;
  tUInt32 DEF_x__h6798;
  tUInt32 DEF_x__h2095;
  tUInt32 DEF_x__h1991;
  tUInt32 DEF_x__h9614;
  tUInt32 DEF_x__h9540;
  tUInt32 DEF__read__h7079;
  tUInt8 DEF_x__h11959;
  tUInt8 DEF_v__h8552;
  tUInt8 DEF_lMemcpyIndicationOutput_portalIfc_indications__ETC___d383;
  tUInt8 DEF_lMemcpyIndicationOutput_portalIfc_indications__ETC___d382;
  tUInt32 DEF_lMemcpy_numWords_BITS_29_TO_0___h10198;
  tUInt8 DEF_lMemcpy_burstLen_BITS_29_TO_0__BITS_7_TO_0___h10171;
  tUInt8 DEF_lMemcpy_we_writeChannels_writeDataFifo_first___ETC___d251;
  tUInt8 DEF_lMemcpy_we_writeChannels_serverDone_first__30__ETC___d231;
  tUInt8 DEF_lMemcpy_re_readChannels_0_serverCheckAvail_fir_ETC___d83;
  tUInt8 DEF_lMemcpy_we_writeChannels_respCnt_10_PLUS_1_11__ETC___d214;
  tUInt32 DEF_new_respCnt__h7376;
  tUInt8 DEF_lMemcpy_wrIterCnt_28_EQ_0___d329;
  tUInt8 DEF_lMemcpy_numWords_00_BITS_29_TO_0_01_CONCAT_0_0_ETC___d306;
  tUInt32 DEF_lMemcpy_numWords_00_BITS_29_TO_0_01_CONCAT_0___d302;
  tUInt8 DEF_lMemcpy_numWords_00_BITS_29_TO_0_01_EQ_0___d322;
  tUInt8 DEF_lMemcpyRequestInputNoc_methodIdReg_30_EQ_0___d431;
  tUInt8 DEF_lMemcpy_we_writeDoneFifo_first__58_EQ_0___d259;
  tUInt32 DEF_cmd_burstLen__h10163;
  tUInt8 DEF_NOT_0_CONCAT_lMemcpy_burstLen_94_BITS_7_TO_0_9_ETC___d308;
  tUInt8 DEF_NOT_lMemcpy_numWords_00_BITS_29_TO_0_01_CONCAT_ETC___d307;
  tUInt8 DEF__0_CONCAT_lMemcpy_burstLen_94_BITS_7_TO_0_95_CO_ETC___d298;
 
 /* Local definitions */
 private:
  tUInt64 DEF_v__h7747;
  tUInt64 DEF_v__h7591;
  tUInt64 DEF_v__h7256;
  tUInt32 DEF_signed_0___d190;
  tUWide DEF_lMemcpyRequestInput_pipes_startCopy_PipeOut_fi_ETC___d373;
  tUWide DEF_lMemcpy_we_writeChannels_clientCommand_first____d182;
  tUWide DEF_lMemcpy_re_readChannels_0_clientRequest_first____d61;
  tUWide DEF_lMemcpy_re_readChannels_0_clientCommand___d93;
  tUWide DEF_lMemcpy_we_writeChannels_writeReqFifo_first____d247;
  tUWide DEF_lMemcpy_re_readChannels_0_clientDataFifo_rCache___d47;
  tUWide DEF_lMemcpy_we_writeChannels_dataBuffer_rCache___d166;
  tUWide DEF_lMemcpy_buffer_rCache___d286;
  tUWide DEF_lMemcpy_re_readChannels_0_clientDataFifo_wData_ETC___d351;
  tUWide DEF_lMemcpy_re_readChannels_0_clientDataFifo_wData_ETC___d25;
  tUWide DEF_lMemcpy_re_readChannels_0_clientDataFifo_memor_ETC___d53;
  tUWide DEF_lMemcpy_re_dataPipes_dataFifos_0_first____d127;
  tUWide DEF_lMemcpy_re_readDataFifo_first____d4;
  tUInt32 DEF_data__h12403;
  tUInt32 DEF_x__h10329;
  tUInt32 DEF_b__h1136;
  tUInt8 DEF_lMemcpy_buffer_pwClear_whas____d264;
  tUInt8 DEF_lMemcpy_we_writeChannels_dataBuffer_pwClear_whas____d144;
  tUInt8 DEF_lMemcpy_re_readChannels_0_clientDataFifo_pwCle_ETC___d16;
  tUWide DEF_lMemcpy_re_readChannels_0_clientDataFifo_rCach_ETC___d52;
  tUWide DEF_lMemcpy_re_dataPipes_dataFifos_0_first__27_BIT_ETC___d128;
  tUWide DEF_IF_lMemcpy_re_readChannels_0_clientDataFifo_rC_ETC___d54;
  tUWide DEF_IF_lMemcpy_re_readChannels_0_clientDataFifo_pw_ETC___d36;
  tUWide DEF_IF_lMemcpy_re_readChannels_0_clientDataFifo_wD_ETC___d35;
  tUWide DEF_lMemcpy_rdPointer_15_CONCAT_0_CONCAT_lMemcpy_b_ETC___d320;
  tUWide DEF__0_CONCAT_lMemcpy_burstLen_94_BITS_7_TO_0_95_CO_ETC___d319;
  tUWide DEF_lMemcpy_wrPointer_32_CONCAT_0_CONCAT_lMemcpy_b_ETC___d337;
  tUWide DEF_lMemcpy_re_readChannels_0_clientCommand_3_BITS_ETC___d102;
  tUWide DEF_lMemcpy_we_writeChannels_clientCommand_first___ETC___d204;
  tUWide DEF__1_CONCAT_lMemcpy_re_readChannels_0_clientDataF_ETC___d38;
  tUWide DEF__1_CONCAT_lMemcpy_we_writeChannels_dataBuffer_r_ETC___d157;
  tUWide DEF__1_CONCAT_lMemcpy_buffer_rWrPtr_read__67_CONCAT_ETC___d277;
  tUWide DEF_lMemcpy_re_dataPipes_dataFifos_0_first__27_BIT_ETC___d132;
  tUWide DEF_lMemcpy_we_writeChannels_dataBuffer_wDataOut_w_ETC___d227;
  tUInt8 DEF__0_CONCAT_lMemcpy_burstLen_94_BITS_7_TO_0_95_CO_ETC___d317;
  tUInt8 DEF_NOT_lMemcpy_buffer_pwClear_whas__64___d270;
  tUInt8 DEF_NOT_lMemcpy_we_writeChannels_dataBuffer_pwClea_ETC___d150;
  tUInt8 DEF_NOT_lMemcpy_re_readChannels_0_clientDataFifo_p_ETC___d22;
  tUWide DEF_writers_0_writeData_get__avValue3;
  tUWide DEF_writers_0_writeReq_get__avValue2;
  tUWide DEF_readers_0_readReq_get__avValue1;
 
 /* Rules */
 public:
  void RL_lMemcpy_re_dataPipes_unfunnel();
  void RL_lMemcpy_re_readChannels_0_clientAvail_react();
  void RL_lMemcpy_re_readChannels_0_clientDataFifo_portA();
  void RL_lMemcpy_re_readChannels_0_clientDataFifo_portB();
  void RL_lMemcpy_re_readChannels_0_clientDataFifo_portB_read_data();
  void RL_lMemcpy_re_readChannels_0_incCounter();
  void RL_lMemcpy_re_readChannels_0_rule_cycles();
  void RL_lMemcpy_re_readChannels_0_rule_startNew();
  void RL_lMemcpy_re_readChannels_0_rule_checkAvail();
  void RL_lMemcpy_re_readChannels_0_rule_requestServer();
  void RL_lMemcpy_re_readChannels_0_read_data_rule();
  void RL_lMemcpy_we_writeChannels_clientAvail_react();
  void RL_lMemcpy_we_writeChannels_dataBuffer_portA();
  void RL_lMemcpy_we_writeChannels_dataBuffer_portB();
  void RL_lMemcpy_we_writeChannels_dataBuffer_portB_read_data();
  void RL_lMemcpy_we_writeChannels_rl_cycles();
  void RL_lMemcpy_we_writeChannels_rlWriteReq();
  void RL_lMemcpy_we_writeChannels_rlWriteData();
  void RL_lMemcpy_we_writeChannels_rlWriteDone();
  void RL_lMemcpy_we_rl_arbitration();
  void RL_lMemcpy_we_rl_writeData();
  void RL_lMemcpy_we_rl_writeDone();
  void RL_lMemcpy_buffer_portA();
  void RL_lMemcpy_buffer_portB();
  void RL_lMemcpy_buffer_portB_read_data();
  void RL_lMemcpy_start_read();
  void RL_lMemcpy_start_write();
  void RL_lMemcpy_write_finish();
  void RL_lMemcpy_fill_buffer();
  void RL_lMemcpy_drain_buffer();
  void RL_lMemcpy_test();
  void RL_handle_startCopy_request();
  void RL_lMemcpyIndicationOutputNoc_sendHeader();
  void RL_lMemcpyIndicationOutputNoc_sendMessage();
  void RL_lMemcpyRequestInputNoc_receiveMessageHeader();
  void RL_lMemcpyRequestInputNoc_receiveMessage();
 
 /* Methods */
 public:
  tUInt32 METH_requests_0_id();
  tUInt8 METH_RDY_requests_0_id();
  tUInt32 METH_indications_0_id();
  tUInt8 METH_RDY_indications_0_id();
  void METH_requests_0_message_enq(tUInt32 ARG_requests_0_message_enq_v);
  tUInt8 METH_RDY_requests_0_message_enq();
  tUInt8 METH_requests_0_message_notFull();
  tUInt8 METH_RDY_requests_0_message_notFull();
  tUInt32 METH_indications_0_message_first();
  tUInt8 METH_RDY_indications_0_message_first();
  void METH_indications_0_message_deq();
  tUInt8 METH_RDY_indications_0_message_deq();
  tUInt8 METH_indications_0_message_notEmpty();
  tUInt8 METH_RDY_indications_0_message_notEmpty();
  tUWide METH_readers_0_readReq_get();
  tUInt8 METH_RDY_readers_0_readReq_get();
  void METH_readers_0_readData_put(tUWide ARG_readers_0_readData_put);
  tUInt8 METH_RDY_readers_0_readData_put();
  tUWide METH_readers_1_readReq_get();
  tUInt8 METH_RDY_readers_1_readReq_get();
  void METH_readers_1_readData_put(tUWide ARG_readers_1_readData_put);
  tUInt8 METH_RDY_readers_1_readData_put();
  tUWide METH_writers_0_writeReq_get();
  tUInt8 METH_RDY_writers_0_writeReq_get();
  tUWide METH_writers_0_writeData_get();
  tUInt8 METH_RDY_writers_0_writeData_get();
  void METH_writers_0_writeDone_put(tUInt8 ARG_writers_0_writeDone_put);
  tUInt8 METH_RDY_writers_0_writeDone_put();
  tUWide METH_writers_1_writeReq_get();
  tUInt8 METH_RDY_writers_1_writeReq_get();
  tUWide METH_writers_1_writeData_get();
  tUInt8 METH_RDY_writers_1_writeData_get();
  void METH_writers_1_writeDone_put(tUInt8 ARG_writers_1_writeDone_put);
  tUInt8 METH_RDY_writers_1_writeDone_put();
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkCnocTop &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkCnocTop &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkCnocTop &backing);
  void vcd_submodules(tVCDDumpType dt, unsigned int levels, MOD_mkCnocTop &backing);
};

#endif /* ifndef __mkCnocTop_h__ */
