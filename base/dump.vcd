$date
   Fri Dec  8 18:23:18 2023
$end
$version
  2023.1
$end
$timescale
  1ps
$end
$scope module bfis_tb $end
$var reg 1 K" clk_in $end
$var reg 1 L" rst_in $end
$var reg 32 M" vertex_in [31:0] $end
$var reg 32 N" vertex_id_in [31:0] $end
$var reg 16 O" k_in [15:0] $end
$var reg 32 % top_k_out [31:0] $end
$var reg 1 & valid_out $end
$var reg 32 P" query_pos_in0 [31:0] $end
$var reg 32 Q" query_pos_in1 [31:0] $end
$var reg 32 R" query_pos_in2 [31:0] $end
$var reg 32 S" query_pos_in3 [31:0] $end
$var reg 3 ' state [2:0] $end
$scope module bfis_m $end
$var wire 1 ! clk_in $end
$var wire 1 " rst_in $end
$var wire 32 # vertex_id_in [31:0] $end
$var wire 16 $ k_in [15:0] $end
$var reg 32 % top_k_out [31:0] $end
$var reg 1 & valid_out $end
$var reg 3 ' state [2:0] $end
$var reg 32 ( point_addr [31:0] $end
$var reg 3 ) ct_dist [2:0] $end
$var reg 32 * neigh_fifo_out [31:0] $end
$var reg 32 + data_out [31:0] $end
$var reg 32 , v_addr_in [31:0] $end
$var reg 1 - pos_empty_out $end
$var reg 1 . pos_full_out $end
$var reg 1 / fetch_data_valid_out $end
$var reg 1 0 pos_deq_in $end
$var reg 1 1 valid_in $end
$var reg 1 2 ready_out $end
$var reg 1 3 neigh_full_out $end
$var reg 1 4 neigh_empty_out $end
$var reg 1 5 neigh_valid_out $end
$var reg 1 6 reached_neigh_end_out $end
$var reg 32 7 pq_out [31:0] $end
$var reg 32 8 pq_dist_out [31:0] $end
$var reg 1 9 pq_valid_out $end
$var reg 4 : pq_size [3:0] $end
$var reg 1 ; pq_deq_in $end
$var reg 1 < pq_empty_out $end
$var reg 1 = mem_valid_in $end
$var reg 1 > mem_valid_out $end
$var reg 32 ? mem_data_in [31:0] $end
$var reg 32 @ mem_req_out [31:0] $end
$var reg 1 A mem_valid_in2 $end
$var reg 1 B mem_valid_out2 $end
$var reg 32 C mem_data_in2 [31:0] $end
$var reg 32 D mem_req_out2 [31:0] $end
$var reg 1 E data_valid_out $end
$var reg 1 F neigh_deq $end
$var reg 1 G pos_deq $end
$var reg 32 H dist_out [31:0] $end
$var reg 1 I dist_valid_out $end
$var reg 1 J distance_complete $end
$var reg 1 K visited $end
$var reg 1 L valid_visited $end
$var reg 32 M visited_addr_in [31:0] $end
$var reg 1 N visited_addr_valid_in $end
$var reg 1 O checked_valid_in $end
$var reg 1 P checked_valid_out $end
$var reg 1 Q checked_max_deq $end
$var reg 1 R checked_min_deq $end
$var reg 1 S checked_full_out $end
$var reg 1 T checked_empty_out $end
$var reg 32 U checked_data_in [31:0] $end
$var reg 32 V checked_tag_in [31:0] $end
$var reg 32 W checked_data_out [31:0] $end
$var reg 32 X checked_tag_out [31:0] $end
$var reg 32 Y checked_max_tag [31:0] $end
$var reg 4 Z checked_size [3:0] $end
$var reg 6 [ checked_counter [5:0] $end
$var reg 16 \ k_count [15:0] $end
$var reg 1 ] initial_lookup $end
$var reg 32 ^ idx_lookup_addr [31:0] $end
$var reg 1 _ idx_lookup_addr_valid $end
$var reg 32 ` idxaddr_out [31:0] $end
$var reg 1 a idxaddr_out_valid $end
$var reg 1 b checked_proc_deq $end
$var reg 1 c vertex_addr_in $end
$var reg 32 d vertex_in [31:0] $end
$var reg 32 e first_pos_lookup_addr [31:0] $end
$var reg 32 f mem_req_out2_route [31:0] $end
$var reg 32 g mem_data_in2_route [31:0] $end
$var reg 1 h vertex_valid_in $end
$var reg 1 i first_pos_lookup_addr_valid $end
$var reg 1 j mem_valid_out2_route $end
$var reg 1 k mem_valid_in2_route $end
$scope module distance_calc $end
$var wire 1 ! clk_in $end
$var wire 1 " rst_in $end
$var reg 32 H distance_sq_out [31:0] $end
$var reg 1 I data_valid_out $end
$var reg 3 l state [2:0] $end
$var reg 32 m distance [31:0] $end
$var reg 1 n valid_add_out $end
$var reg 2 o i [1:0] $end
$var reg 2 p k [1:0] $end
$scope begin Block79_2 $end
$var reg 32 q j [31:0] $end
$upscope $end
$upscope $end
$scope module checked $end
$var wire 1 ! clk_in $end
$var wire 1 " rst_in $end
$var wire 1 r deq_smallest_in $end
$var wire 1 s deq_largest_in $end
$var wire 32 t enq_data_in [31:0] $end
$var wire 32 u enq_tag_in [31:0] $end
$var wire 1 v enq_in $end
$var reg 1 S full_out $end
$var reg 32 W data_out [31:0] $end
$var reg 32 X tag_out [31:0] $end
$var reg 4 Z size_out [3:0] $end
$var reg 1 T empty_out $end
$var reg 1 P valid_out $end
$var reg 32 Y max_tag_out [31:0] $end
$var reg 1 b proc_deq_ready $end
$var reg 4 w read_ptr_min [3:0] $end
$var reg 4 x read_ptr_max [3:0] $end
$var reg 4 y prev_read_ptr [3:0] $end
$var reg 4 z write_ptr [3:0] $end
$var reg 32 { curval [31:0] $end
$var reg 32 | maxval [31:0] $end
$var reg 1 } rem_lru $end
$var reg 1 ~ push_lru $end
$var reg 1 !! deq_high $end
$var reg 5 "! i [4:0] $end
$var reg 1 #! ready $end
$var reg 33 $! tmp_out [32:0] $end
$var reg 2 %! in_req_out [1:0] $end
$var reg 1 &! in_req_valid_out $end
$scope module buf_out_max $end
$var wire 1 ! clk_in $end
$var wire 1 " rst_in $end
$var wire 1 '! deq_in $end
$var wire 2 (! enq_data_in [1:0] $end
$var wire 1 )! enq_in $end
$var reg 1 *! full_out $end
$var reg 2 %! data_out [1:0] $end
$var reg 1 b empty_out $end
$var reg 1 &! valid_out $end
$var reg 4 +! read_ptr [3:0] $end
$var reg 4 ,! write_ptr [3:0] $end
$scope begin Block27_7 $end
$var reg 32 -! i [31:0] $end
$upscope $end
$upscope $end
$scope module lru_cache $end
$var wire 1 ! clk_in $end
$var wire 1 " rst_in $end
$var wire 1 .! deq_in $end
$var wire 4 /! enq_data_in [3:0] $end
$var wire 1 0! enq_in $end
$var reg 1 1! full_out $end
$var reg 4 z data_out [3:0] $end
$var reg 1 2! empty_out $end
$var reg 1 3! valid_out $end
$var reg 4 4! read_ptr [3:0] $end
$var reg 4 5! write_ptr [3:0] $end
$scope begin Block240_10 $end
$var reg 32 6! i [31:0] $end
$upscope $end
$upscope $end
$scope begin Block162_12 $end
$var reg 32 7! i [31:0] $end
$upscope $end
$upscope $end
$scope module s $end
$var wire 1 ! clk_in $end
$var wire 1 " rst_in $end
$var wire 1 8! deq_smallest_in $end
$var wire 1 9! deq_largest_in $end
$var wire 32 :! enq_data_in [31:0] $end
$var wire 32 ;! enq_tag_in [31:0] $end
$var wire 1 <! enq_in $end
$var reg 1 =! full_out $end
$var reg 32 , data_out [31:0] $end
$var reg 32 8 tag_out [31:0] $end
$var reg 4 : size_out [3:0] $end
$var reg 1 < empty_out $end
$var reg 1 9 valid_out $end
$var reg 32 >! max_tag_out [31:0] $end
$var reg 1 ?! proc_deq_ready $end
$var reg 4 @! read_ptr_min [3:0] $end
$var reg 4 A! read_ptr_max [3:0] $end
$var reg 4 B! prev_read_ptr [3:0] $end
$var reg 4 C! write_ptr [3:0] $end
$var reg 32 D! curval [31:0] $end
$var reg 32 E! maxval [31:0] $end
$var reg 1 F! rem_lru $end
$var reg 1 G! push_lru $end
$var reg 1 H! deq_high $end
$var reg 5 I! i [4:0] $end
$var reg 1 J! ready $end
$var reg 33 K! tmp_out [32:0] $end
$var reg 2 L! in_req_out [1:0] $end
$var reg 1 M! in_req_valid_out $end
$scope module buf_out_max $end
$var wire 1 ! clk_in $end
$var wire 1 " rst_in $end
$var wire 1 N! deq_in $end
$var wire 2 O! enq_data_in [1:0] $end
$var wire 1 P! enq_in $end
$var reg 1 Q! full_out $end
$var reg 2 L! data_out [1:0] $end
$var reg 1 ?! empty_out $end
$var reg 1 M! valid_out $end
$var reg 4 R! read_ptr [3:0] $end
$var reg 4 S! write_ptr [3:0] $end
$scope begin Block27_7 $end
$var reg 32 T! i [31:0] $end
$upscope $end
$upscope $end
$scope module lru_cache $end
$var wire 1 ! clk_in $end
$var wire 1 " rst_in $end
$var wire 1 U! deq_in $end
$var wire 4 V! enq_data_in [3:0] $end
$var wire 1 W! enq_in $end
$var reg 1 X! full_out $end
$var reg 4 C! data_out [3:0] $end
$var reg 1 Y! empty_out $end
$var reg 1 Z! valid_out $end
$var reg 4 [! read_ptr [3:0] $end
$var reg 4 \! write_ptr [3:0] $end
$scope begin Block240_19 $end
$var reg 32 ]! i [31:0] $end
$upscope $end
$upscope $end
$scope begin Block162_21 $end
$var reg 32 ^! i [31:0] $end
$upscope $end
$upscope $end
$scope module gmem $end
$var wire 1 ! clk_in $end
$var wire 1 " rst_in $end
$var wire 32 _! idx_addr [31:0] $end
$var wire 1 `! idx_validin $end
$var wire 32 a! data_addra [31:0] $end
$var wire 32 b! data_addrb [31:0] $end
$var wire 1 c! data_validina $end
$var wire 1 d! data_validinb $end
$var reg 32 ` rowidx_out [31:0] $end
$var reg 32 ? data_outa [31:0] $end
$var reg 32 g data_outb [31:0] $end
$var reg 1 = data_valid_outa $end
$var reg 1 k data_valid_outb $end
$var reg 1 a rowidx_valid_out $end
$var reg 32 e! addra [31:0] $end
$var reg 32 f! addrb [31:0] $end
$var reg 32 g! addrc [31:0] $end
$var reg 2 h! cta [1:0] $end
$var reg 1 i! ctb $end
$var reg 2 j! ctc [1:0] $end
$scope module data_mem $end
$var wire 10 k! addra [9:0] $end
$var wire 10 l! addrb [9:0] $end
$var wire 32 m! dina [31:0] $end
$var wire 32 n! dinb [31:0] $end
$var wire 1 ! clka $end
$var wire 1 ! clkb $end
$var wire 1 o! wea $end
$var wire 1 p! web $end
$var wire 1 q! ena $end
$var wire 1 r! enb $end
$var wire 1 " rsta $end
$var wire 1 " rstb $end
$var wire 1 s! regcea $end
$var wire 1 t! regceb $end
$var wire 32 u! douta [31:0] $end
$var wire 32 v! doutb [31:0] $end
$var reg 32 w! ram_data_a [31:0] $end
$var reg 32 x! ram_data_b [31:0] $end
$var integer 32 y! idx [31:0] $end
$var reg 32 z! \output_register.douta_reg  [31:0] $end
$var reg 32 {! \output_register.doutb_reg  [31:0] $end
$upscope $end
$scope module ptr_mem $end
$var wire 10 |! addra [9:0] $end
$var wire 32 }! dina [31:0] $end
$var wire 1 ! clka $end
$var wire 1 ~! wea $end
$var wire 1 !" ena $end
$var wire 1 " rsta $end
$var wire 1 "" regcea $end
$var wire 32 #" douta [31:0] $end
$var reg 32 $" ram_data [31:0] $end
$var reg 32 %" \output_register.douta_reg  [31:0] $end
$upscope $end
$upscope $end
$scope module vmem $end
$var wire 1 ! clk_in $end
$var wire 1 " rst_in $end
$var wire 32 &" v_addr_in [31:0] $end
$var wire 1 '" v_addr_valid_in $end
$var reg 1 K visited_out $end
$var reg 1 L valid_v_out $end
$var reg 2 (" counter2 [1:0] $end
$var reg 1 )" visited $end
$var reg 1 *" write_v_valid_in $end
$scope module bram_3_2 $end
$var wire 10 +" addra [9:0] $end
$var wire 1 ," dina [0:0] $end
$var wire 1 ! clka $end
$var wire 1 -" wea $end
$var wire 1 ." ena $end
$var wire 1 " rsta $end
$var wire 1 /" regcea $end
$var wire 1 0" douta [0:0] $end
$var reg 1 1" ram_data [0:0] $end
$var reg 1 2" \output_register.douta_reg  [0:0] $end
$upscope $end
$upscope $end
$scope module graph $end
$var wire 1 ! clk_in $end
$var wire 1 " rst_in $end
$var wire 32 3" v_addr_in [31:0] $end
$var wire 1 4" valid_in $end
$var reg 1 2 ready_out $end
$var wire 1 5" pos_deq_in $end
$var reg 32 + data_out [31:0] $end
$var reg 1 / data_valid_out $end
$var reg 1 . pos_full_out $end
$var reg 1 - pos_empty_out $end
$var wire 1 6" neigh_deq_in $end
$var reg 32 * neigh_fifo_out [31:0] $end
$var reg 1 5 neigh_valid_out $end
$var reg 1 3 neigh_full_out $end
$var reg 1 4 neigh_empty_out $end
$var reg 1 6 reached_neigh_end_out $end
$var wire 1 7" mem_valid_in $end
$var wire 32 8" mem_data_in [31:0] $end
$var reg 1 > mem_valid_out $end
$var reg 32 @ mem_req_out [31:0] $end
$var wire 1 9" mem_valid_in2 $end
$var wire 32 :" mem_data_in2 [31:0] $end
$var reg 1 B mem_valid_out2 $end
$var reg 32 D mem_req_out2 [31:0] $end
$var reg 32 M visited_req_out [31:0] $end
$var reg 1 N visited_req_valid_out $end
$var wire 1 ;" visited_val_returned_in $end
$var wire 1 <" visited_val_returned_valid_in $end
$var reg 4 =" ct [3:0] $end
$var reg 1 >" req_ready_n $end
$var reg 1 ?" req_ready_d $end
$var reg 1 @" valid_bit $end
$var reg 1 A" req_ready_v $end
$scope module neighbors $end
$var wire 1 ! clk_in $end
$var wire 1 " rst_in $end
$var wire 1 6" deq_in $end
$var wire 32 :" enq_data_in [31:0] $end
$var wire 1 B" enq_in $end
$var reg 1 3 full_out $end
$var reg 32 * data_out [31:0] $end
$var reg 1 4 empty_out $end
$var reg 1 5 valid_out $end
$var reg 3 C" read_ptr [2:0] $end
$var reg 3 D" write_ptr [2:0] $end
$scope begin Block27_38 $end
$var reg 32 E" i [31:0] $end
$upscope $end
$upscope $end
$scope module position $end
$var wire 1 ! clk_in $end
$var wire 1 " rst_in $end
$var wire 1 5" deq_in $end
$var wire 32 8" enq_data_in [31:0] $end
$var wire 1 F" enq_in $end
$var reg 1 . full_out $end
$var reg 32 + data_out [31:0] $end
$var reg 1 - empty_out $end
$var reg 1 / valid_out $end
$var reg 5 G" read_ptr [4:0] $end
$var reg 5 H" write_ptr [4:0] $end
$scope begin Block27_41 $end
$var reg 32 I" i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin Block72_45 $end
$var reg 32 J" i [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
x!
x!!
x!"
x"
bx "!
x""
bx #
x#!
bx #"
bx $
bx $!
b0 $"
bx %
bx %!
b0 %"
x&
x&!
bx &"
bx '
x'!
x'"
bx (
bx (!
bx ("
bx )
x)!
x)"
bx *
x*!
x*"
bx +
bx +!
bx +"
bx ,
bx ,!
x,"
x-
b0 -!
x-"
x.
x.!
x."
x/
bx /!
x/"
x0
x0!
x0"
x1
x1!
01"
x2
x2!
02"
x3
x3!
bx 3"
x4
bx 4!
x4"
x5
bx 5!
x5"
x6
b0 6!
x6"
bx 7
b0 7!
x7"
bx 8
x8!
bx 8"
x9
z9!
x9"
bx :
bx :!
bx :"
x;
bx ;!
x;"
x<
x<!
x<"
x=
x=!
bx ="
x>
bx >!
x>"
bx ?
x?!
x?"
bx @
bx @!
x@"
xA
bx A!
xA"
xB
bx B!
xB"
bx C
bx C!
bx C"
bx D
bx D!
bx D"
xE
bx E!
b0 E"
xF
xF!
xF"
xG
xG!
bx G"
bx H
xH!
bx H"
xI
bx I!
b0 I"
xJ
xJ!
b0 J"
xK
bx K!
xK"
xL
bx L!
xL"
bx M
xM!
bx M"
xN
xN!
bx N"
xO
bxz O!
bx O"
xP
xP!
bx P"
xQ
xQ!
bx Q"
xR
bx R!
bx R"
xS
bx S!
bx S"
xT
b0 T!
bx U
xU!
bx V
bx V!
bx W
xW!
bx X
xX!
bx Y
xY!
bx Z
xZ!
bx [
bx [!
bx \
bx \!
x]
b0 ]!
bx ^
b0 ^!
x_
bx _!
bx `
x`!
xa
bx a!
xb
bx b!
xc
xc!
bx d
xd!
bx e
bx e!
bx f
bx f!
bx g
bx g!
xh
bx h!
xi
xi!
xj
bx j!
xk
bx k!
bx l
bx l!
bx m
bx m!
xn
bx n!
bx o
xo!
bx p
xp!
b0 q
xq!
xr
xr!
xs
xs!
bx t
xt!
bx u
bx u!
xv
bx v!
bx w
b0 w!
bx x
b0 x!
bx y
bx y!
bx z
b0 z!
bx {
b0 {!
bx |
bx |!
x}
bx }!
x~
x~!
$end
