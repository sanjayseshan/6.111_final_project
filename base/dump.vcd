$date
   Mon Dec  4 06:03:21 2023
$end
$version
  2023.1
$end
$timescale
  1ps
$end
$scope module bfis_tb $end
$var reg 1 [! clk_in $end
$var reg 1 \! rst_in $end
$var reg 32 ]! vertex_in [31:0] $end
$var reg 32 ^! vertex_addr_in [31:0] $end
$var reg 1 _! vertex_valid_in $end
$var reg 16 `! k_in [15:0] $end
$var reg 1 ' valid_out $end
$var reg 32 a! query_pos_in0 [31:0] $end
$var reg 32 b! query_pos_in1 [31:0] $end
$var reg 32 c! top_k_out0 [31:0] $end
$var reg 32 d! top_k_out1 [31:0] $end
$var reg 32 e! top_k_out2 [31:0] $end
$var reg 32 f! top_k_out3 [31:0] $end
$var reg 32 g! query_pos_in2 [31:0] $end
$var reg 32 h! query_pos_in3 [31:0] $end
$var reg 5 ( state [4:0] $end
$scope module bfis_m $end
$var wire 1 ! clk_in $end
$var wire 1 " rst_in $end
$var wire 32 # vertex_in [31:0] $end
$var wire 32 $ vertex_addr_in [31:0] $end
$var wire 1 % vertex_valid_in $end
$var wire 16 & k_in [15:0] $end
$var reg 1 ' valid_out $end
$var reg 5 ( state [4:0] $end
$var reg 32 ) point_addr [31:0] $end
$var reg 3 * ct_dist [2:0] $end
$var reg 32 + neigh_fifo_out [31:0] $end
$var reg 32 , data_out [31:0] $end
$var reg 32 - v_addr_in [31:0] $end
$var reg 1 . pos_empty_out $end
$var reg 1 / pos_full_out $end
$var reg 1 0 fetch_data_valid_out $end
$var reg 1 1 pos_deq_in $end
$var reg 1 2 valid_in $end
$var reg 1 3 ready_out $end
$var reg 1 4 neigh_full_out $end
$var reg 1 5 neigh_empty_out $end
$var reg 1 6 neigh_valid_out $end
$var reg 32 7 pq_out [31:0] $end
$var reg 32 8 pq_dist_out [31:0] $end
$var reg 1 9 pq_valid_out $end
$var reg 4 : pq_size [3:0] $end
$var reg 1 ; pq_deq_in $end
$var reg 1 < mem_valid_in $end
$var reg 32 = mem_data_in [31:0] $end
$var reg 1 > mem_valid_out $end
$var reg 32 ? mem_req_out [31:0] $end
$var reg 1 @ mem_valid_in2 $end
$var reg 32 A mem_data_in2 [31:0] $end
$var reg 1 B mem_valid_out2 $end
$var reg 32 C mem_req_out2 [31:0] $end
$var reg 1 D data_valid_out $end
$var reg 1 E neigh_deq $end
$var reg 32 F dist_out [31:0] $end
$var reg 1 G dist_valid_out $end
$var reg 1 H checked $end
$var reg 1 I visited $end
$var reg 1 J valid_checked $end
$var reg 1 K valid_visited $end
$scope module distance_calc $end
$var wire 1 ! clk_in $end
$var wire 1 " rst_in $end
$var reg 32 F distance_sq_out [31:0] $end
$var reg 1 G data_valid_out $end
$var reg 3 L state [2:0] $end
$var reg 32 M distance [31:0] $end
$var reg 1 N valid_add_out $end
$var reg 2 O i [1:0] $end
$var reg 2 P j [1:0] $end
$var reg 2 Q k [1:0] $end
$upscope $end
$scope module s $end
$var wire 1 ! clk_in $end
$var wire 1 " rst_in $end
$var wire 1 R deq_in $end
$var wire 32 S enq_data_in [31:0] $end
$var wire 32 T enq_tag_in [31:0] $end
$var wire 1 U enq_in $end
$var reg 1 V full_out $end
$var reg 32 - data_out [31:0] $end
$var reg 32 8 tag_out [31:0] $end
$var reg 4 : size_out [3:0] $end
$var reg 1 W empty_out $end
$var reg 1 9 valid_out $end
$var reg 4 X read_ptr [3:0] $end
$var reg 4 Y write_ptr [3:0] $end
$var reg 32 Z curval [31:0] $end
$var reg 1 [ rem_lru $end
$var reg 1 \ push_lru $end
$scope begin Block39_3 $end
$var reg 32 ] i [31:0] $end
$upscope $end
$scope module lru_cache $end
$var wire 1 ! clk_in $end
$var wire 1 " rst_in $end
$var wire 1 ^ deq_in $end
$var wire 4 _ enq_data_in [3:0] $end
$var wire 1 ` enq_in $end
$var reg 1 a full_out $end
$var reg 4 Y data_out [3:0] $end
$var reg 1 b empty_out $end
$var reg 1 c valid_out $end
$var reg 4 d read_ptr [3:0] $end
$var reg 4 e write_ptr [3:0] $end
$scope begin Block133_6 $end
$var reg 32 f i [31:0] $end
$upscope $end
$upscope $end
$scope begin Block62_8 $end
$var reg 32 g i [31:0] $end
$upscope $end
$upscope $end
$scope module gmem $end
$var wire 1 ! clk_in $end
$var wire 1 " rst_in $end
$var wire 32 h idx_addr [31:0] $end
$var wire 1 i idx_validin $end
$var wire 32 j data_addra [31:0] $end
$var wire 32 k data_addrb [31:0] $end
$var wire 1 l data_validina $end
$var wire 1 m data_validinb $end
$var reg 32 n rowidx_out [31:0] $end
$var reg 32 = data_outa [31:0] $end
$var reg 32 A data_outb [31:0] $end
$var reg 1 < data_valid_outa $end
$var reg 1 @ data_valid_outb $end
$var reg 1 o rowidx_valid_out $end
$var reg 32 p addra [31:0] $end
$var reg 32 q addrb [31:0] $end
$var reg 32 r addrc [31:0] $end
$var reg 2 s cta [1:0] $end
$var reg 1 t ctb $end
$var reg 2 u ctc [1:0] $end
$scope module data_mem $end
$var wire 10 v addra [9:0] $end
$var wire 10 w addrb [9:0] $end
$var wire 32 x dina [31:0] $end
$var wire 32 y dinb [31:0] $end
$var wire 1 ! clka $end
$var wire 1 ! clkb $end
$var wire 1 z wea $end
$var wire 1 { web $end
$var wire 1 | ena $end
$var wire 1 } enb $end
$var wire 1 " rsta $end
$var wire 1 " rstb $end
$var wire 1 ~ regcea $end
$var wire 1 !! regceb $end
$var wire 32 "! douta [31:0] $end
$var wire 32 #! doutb [31:0] $end
$var reg 32 $! ram_data_a [31:0] $end
$var reg 32 %! ram_data_b [31:0] $end
$var integer 32 &! idx [31:0] $end
$var reg 32 '! \output_register.douta_reg  [31:0] $end
$var reg 32 (! \output_register.doutb_reg  [31:0] $end
$upscope $end
$scope module ptr_mem $end
$var wire 10 )! addra [9:0] $end
$var wire 32 *! dina [31:0] $end
$var wire 1 ! clka $end
$var wire 1 +! wea $end
$var wire 1 ,! ena $end
$var wire 1 " rsta $end
$var wire 1 -! regcea $end
$var wire 32 .! douta [31:0] $end
$var reg 32 /! ram_data [31:0] $end
$var reg 32 0! \output_register.douta_reg  [31:0] $end
$upscope $end
$upscope $end
$scope module graph $end
$var wire 1 ! clk_in $end
$var wire 1 " rst_in $end
$var wire 32 1! v_addr_in [31:0] $end
$var wire 1 2! valid_in $end
$var reg 1 3 ready_out $end
$var wire 1 3! pos_deq_in $end
$var reg 32 , data_out [31:0] $end
$var reg 1 0 data_valid_out $end
$var reg 1 / pos_full_out $end
$var reg 1 . pos_empty_out $end
$var wire 1 4! neigh_deq_in $end
$var reg 32 + neigh_fifo_out [31:0] $end
$var reg 1 6 neigh_valid_out $end
$var reg 1 4 neigh_full_out $end
$var reg 1 5 neigh_empty_out $end
$var wire 1 5! mem_valid_in $end
$var wire 32 6! mem_data_in [31:0] $end
$var reg 1 > mem_valid_out $end
$var reg 32 ? mem_req_out [31:0] $end
$var wire 1 7! mem_valid_in2 $end
$var wire 32 8! mem_data_in2 [31:0] $end
$var reg 1 B mem_valid_out2 $end
$var reg 32 C mem_req_out2 [31:0] $end
$var reg 4 9! ct [3:0] $end
$var reg 1 :! req_ready_n $end
$var reg 1 ;! req_ready_d $end
$scope module neighbors $end
$var wire 1 ! clk_in $end
$var wire 1 " rst_in $end
$var wire 1 4! deq_in $end
$var wire 32 8! enq_data_in [31:0] $end
$var wire 1 <! enq_in $end
$var reg 1 4 full_out $end
$var reg 32 + data_out [31:0] $end
$var reg 1 5 empty_out $end
$var reg 1 6 valid_out $end
$var reg 3 =! read_ptr [2:0] $end
$var reg 3 >! write_ptr [2:0] $end
$scope begin Block27_21 $end
$var reg 32 ?! i [31:0] $end
$upscope $end
$upscope $end
$scope module position $end
$var wire 1 ! clk_in $end
$var wire 1 " rst_in $end
$var wire 1 3! deq_in $end
$var wire 32 6! enq_data_in [31:0] $end
$var wire 1 @! enq_in $end
$var reg 1 / full_out $end
$var reg 32 , data_out [31:0] $end
$var reg 1 . empty_out $end
$var reg 1 0 valid_out $end
$var reg 5 A! read_ptr [4:0] $end
$var reg 5 B! write_ptr [4:0] $end
$scope begin Block27_24 $end
$var reg 32 C! i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cvmem $end
$var wire 1 ! clk_in $end
$var wire 1 " rst_in $end
$var wire 32 D! c_addr_in [31:0] $end
$var wire 32 E! v_addr_in [31:0] $end
$var wire 1 F! c_addr_valid_in $end
$var wire 1 G! v_addr_valid_in $end
$var wire 1 H! write_c_data_in $end
$var wire 1 I! write_c_valid_in $end
$var wire 1 J! write_v_data_in $end
$var wire 1 K! write_v_valid_in $end
$var reg 1 H checked_out $end
$var reg 1 I visited_out $end
$var reg 1 J valid_c_out $end
$var reg 1 K valid_v_out $end
$var reg 1 L! counter $end
$var reg 1 M! counter2 $end
$scope module bram_3 $end
$var wire 10 N! addra [9:0] $end
$var wire 1 H! dina [0:0] $end
$var wire 1 ! clka $end
$var wire 1 I! wea $end
$var wire 1 O! ena $end
$var wire 1 " rsta $end
$var wire 1 P! regcea $end
$var wire 1 Q! douta [0:0] $end
$var reg 1 R! ram_data [0:0] $end
$var reg 1 S! \output_register.douta_reg  [0:0] $end
$upscope $end
$scope module bram_3_2 $end
$var wire 10 T! addra [9:0] $end
$var wire 1 J! dina [0:0] $end
$var wire 1 ! clka $end
$var wire 1 K! wea $end
$var wire 1 U! ena $end
$var wire 1 " rsta $end
$var wire 1 V! regcea $end
$var wire 1 W! douta [0:0] $end
$var reg 1 X! ram_data [0:0] $end
$var reg 1 Y! \output_register.douta_reg  [0:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope begin Block72_36 $end
$var reg 32 Z! i [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0!
1!!
0"
b0 "!
bx #
b0 #!
bx $
b0 $!
x%
b0 %!
bx &
b10000000000 &!
x'
b0 '!
bx (
b0 (!
bx )
bz )!
bx *
b0 *!
bx +
0+!
bx ,
1,!
bx -
1-!
x.
b0 .!
x/
b0 /!
x0
b0 0!
x1
bx 1!
x2
x2!
x3
13!
x4
x4!
x5
x5!
x6
b0 6!
bx 7
x7!
bx 8
b0 8!
x9
bx 9!
bx :
x:!
x;
x;!
x<
0<!
b0 =
bx =!
x>
bx >!
bx ?
b0 ?!
x@
x@!
b0 A
bx A!
xB
bx B!
bx C
b0 C!
xD
bx D!
xE
bx E!
bx F
xF!
xG
xG!
0H
1H!
0I
xI!
xJ
1J!
xK
xK!
bx L
xL!
bx M
xM!
xN
bx N!
bx O
1O!
bx P
1P!
bx Q
0Q!
xR
0R!
bx S
0S!
bx T
bx T!
xU
1U!
xV
1V!
xW
0W!
bx X
0X!
bx Y
0Y!
b11111111111111111111111111111111 Z
b10 Z!
x[
0[!
x\
0\!
b1000 ]
bx ]!
x^
bx ^!
bx _
x_!
x`
bx `!
xa
bx a!
xb
bx b!
xc
bx c!
bx d
bx d!
bx e
bx e!
b0 f
bx f!
b0 g
bx g!
bz h
bx h!
zi
bx j
bx k
xl
xm
b0 n
xo
bx p
bx q
bx r
bx s
xt
bx u
bx v
bx w
b0 x
b0 y
0z
0{
1|
1}
1~
$end
#5000
1!
bx $!
bx %!
bx /!
00
02!
05!
06
07!
09
0;!
0<
0>
0@
0@!
0B
0F!
0G!
0I!
0J
0K
0K!
xR!
xX!
0[
1[!
0\
0^
0`
b0 a!
b0 b!
0l
0m
0o
b0 s
0t
#10000
0!
1"
0[!
1\!
#15000
1!
0'
b0 (
b0 *
b0 +
b0 ,
b0 -
1.
0/
b0 1!
13
04
15
b0 9!
b0 :
0:!
0;
b0 =!
b0 >!
b100 ?!
b0 A!
b0 B!
b10000 C!
b0 E!
b0 F
0G
b0 L
b0 M
b0 O
0R
b0 T
b0 T!
0U
0V
1W
b0 X
b0 Y
1[!
b1000 ]
b0 _
1a
0b
1c
b0 d
b0 e
b1000 f
b1000 g
#20000
0!
0"
b101000000100000011001011000 #
b1 $
1%
0[!
0\!
b101000000100000011001011000 ]!
b1 ^!
1_!
b101 a!
b111 b!
b1 g!
b1 h!
#25000
1!
bx "!
bx #!
bx '!
bx (!
b1 *
bx .!
bx 0!
bx 6!
bx 8!
bx =
bx A
xH
xI
xQ!
xS!
xW!
0X!
xY!
1[!
bx n
#30000
0!
0%
0[!
0_!
b0 e!
b0 f!
#35000
1!
0I
b1 O
b0 P
0W!
0Y!
1[!
#40000
0!
b10010110011100011111010100 #
1%
0[!
b10010110011100011111010100 ]!
1_!
#45000
1!
b10 *
b0 Q
1[!
#50000
0!
0%
0[!
0_!
#55000
1!
b1010111011100111111111011101001 M
b10 O
b1 P
1[!
#60000
0!
b100101010101110101000100000 #
1%
0[!
b100101010101110101000100000 ]!
1_!
#65000
1!
b11 *
b10101110111001111111110111010010 M
b1 Q
1[!
#70000
0!
0%
0[!
0_!
#75000
1!
b1101011011000100101011111111011 M
b11 O
b10 P
1[!
#80000
0!
b100110000100101001010100000 #
1%
0[!
b100110000100101001010100000 ]!
1_!
#85000
1!
b100 *
b100111110111001011001000100100 M
b10 Q
1[!
#90000
0!
0%
0[!
0_!
#95000
1!
b11100111001001010110000111100101 M
b0 O
b11 P
1[!
#100000
0!
0[!
#105000
1!
b10100110011011100001000110100110 M
b0 P
b11 Q
1[!
#110000
0!
0[!
#115000
1!
b11110010000101000101000001100111 F
1G
b0 M
b0 Q
b11110010000101000101000001100111 T
1U
1[!
#120000
0!
0[!
#125000
1!
b1 (
b0 *
12
b1 :
1;
b0 F
0G
1R
b0 T
0U
0W
b11110010000101000101000001100111 Z
1[
1[!
b1000 ]
1^
#130000
0!
0[!
b1 e!
b1 f!
#135000
1!
bx -
bx 1!
12!
b11110010000101000101000001100111 8
19
b0 :
1F!
1I!
1W
b1 X
b1 Y
b11111111111111111111111111111111 Z
0[
1[!
1\
b1000 ]
0^
b1 _
1`
0a
b1 d
#140000
0!
0[!
b0 c!
b0 d!
b0 e!
b0 f!
#145000
1!
02!
09
1B
0F!
0I!
1L!
1M!
1[!
0\
0`
1a
b1 e
1m
#150000
0!
0[!
#155000
1!
0B
1J
1K
0L!
0M!
1[!
0m
1t
#160000
0!
0[!
#165000
1!
17!
x<!
1@
0J
0K
1[!
0t
#170000
0!
0[!
#175000
1!
07!
0<!
0@
1[!
#180000
0!
0[!
#185000
1!
1[!
#190000
0!
0[!
#195000
1!
1[!
#200000
0!
0[!
#205000
1!
1[!
#210000
0!
0[!
#215000
1!
1[!
#220000
0!
0[!
#225000
1!
1[!
#230000
0!
0[!
#235000
1!
1[!
#240000
0!
0[!
#245000
1!
1[!
#250000
0!
0[!
#255000
1!
1[!
#260000
0!
0[!
#265000
1!
1[!
#270000
0!
0[!
#275000
1!
1[!
#280000
0!
0[!
#285000
1!
1[!
#290000
0!
0[!
#295000
1!
1[!
#300000
0!
0[!
#305000
1!
1[!
#310000
0!
0[!
#315000
1!
1[!
#320000
0!
0[!
#325000
1!
1[!
#330000
0!
0[!
#335000
1!
1[!
#340000
0!
0[!
#345000
1!
1[!
#350000
0!
0[!
#355000
1!
1[!
#360000
0!
0[!
#365000
1!
1[!
#370000
0!
0[!
#375000
1!
1[!
#380000
0!
0[!
#385000
1!
1[!
#390000
0!
0[!
#395000
1!
1[!
#400000
0!
0[!
#405000
1!
1[!
#410000
0!
0[!
#415000
1!
1[!
#420000
0!
0[!
#425000
1!
1[!
#430000
0!
0[!
#435000
1!
1[!
#440000
0!
0[!
#445000
1!
1[!
#450000
0!
0[!
#455000
1!
1[!
#460000
0!
0[!
#465000
1!
1[!
#470000
0!
0[!
#475000
1!
1[!
#480000
0!
0[!
#485000
1!
1[!
#490000
0!
0[!
#495000
1!
1[!
#500000
0!
0[!
#505000
1!
1[!
#510000
0!
0[!
#515000
1!
1[!
#520000
0!
0[!
#525000
1!
1[!
#530000
0!
0[!
#535000
1!
1[!
#540000
0!
0[!
#545000
1!
1[!
#550000
0!
0[!
#555000
1!
1[!
#560000
0!
0[!
#565000
1!
1[!
#570000
0!
0[!
#575000
1!
1[!
#580000
0!
0[!
#585000
1!
1[!
#590000
0!
0[!
#595000
1!
1[!
#600000
0!
0[!
#605000
1!
1[!
#610000
0!
0[!
#615000
1!
1[!
#620000
0!
0[!
#625000
1!
1[!
#630000
0!
0[!
#635000
1!
1[!
