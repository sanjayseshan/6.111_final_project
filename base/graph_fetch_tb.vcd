$date
	Sun Nov 19 13:55:54 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module graph_fetch_tb $end
$var wire 1 ! ready_out $end
$var wire 1 " neigh_valid_out $end
$var wire 1 # neigh_full_out $end
$var wire 32 $ neigh_fifo_out [31:0] $end
$var wire 1 % neigh_empty_out $end
$var wire 1 & mem_valid_out2 $end
$var wire 1 ' mem_valid_out $end
$var wire 36 ( mem_req_out2 [35:0] $end
$var wire 36 ) mem_req_out [35:0] $end
$var wire 1 * fully_fetched_out $end
$var reg 1 + clk_in $end
$var reg 32 , data_out0 [31:0] $end
$var reg 32 - data_out1 [31:0] $end
$var reg 1 . data_valid_out0 $end
$var reg 1 / data_valid_out1 $end
$var reg 36 0 mem_data_in [35:0] $end
$var reg 36 1 mem_data_in2 [35:0] $end
$var reg 1 2 mem_valid_in $end
$var reg 1 3 mem_valid_in2 $end
$var reg 1 4 neigh_deq_in $end
$var reg 1 5 rst_in $end
$var reg 32 6 v_addr_in [31:0] $end
$var reg 1 7 valid_in $end
$scope module graph $end
$var wire 1 + clk_in $end
$var wire 36 8 mem_data_in [35:0] $end
$var wire 36 9 mem_data_in2 [35:0] $end
$var wire 1 2 mem_valid_in $end
$var wire 1 3 mem_valid_in2 $end
$var wire 1 4 neigh_deq_in $end
$var wire 1 5 rst_in $end
$var wire 32 : v_addr_in [31:0] $end
$var wire 1 7 valid_in $end
$var wire 1 " neigh_valid_out $end
$var wire 1 ; neigh_ready $end
$var wire 32 < neigh_out [31:0] $end
$var wire 1 # neigh_full_out $end
$var wire 32 = neigh_fifo_out [31:0] $end
$var wire 1 % neigh_empty_out $end
$var wire 1 & mem_valid_out2 $end
$var wire 1 ' mem_valid_out $end
$var wire 36 > mem_req_out2 [35:0] $end
$var wire 36 ? mem_req_out [35:0] $end
$var wire 1 @ data_ready $end
$var wire 32 A data_out_ct [31:0] $end
$var parameter 32 B DIM $end
$var reg 3 C ct [2:0] $end
$var reg 1 * fully_fetched_out $end
$var reg 32 D read_addr_data [31:0] $end
$var reg 32 E read_addr_neigh [31:0] $end
$var reg 1 ! ready_out $end
$var reg 1 F req_ready_d $end
$var reg 1 G req_ready_n $end
$scope module data_port2 $end
$var wire 32 H addr_req_in [31:0] $end
$var wire 1 + clk_in $end
$var wire 36 I data_route_in [35:0] $end
$var wire 1 F req_ready_in $end
$var wire 1 5 rst_in $end
$var wire 1 3 valid_in $end
$var parameter 32 J DATA_SIZE $end
$var parameter 32 K PROC_BITS $end
$var parameter 4 L PROC_ID $end
$var reg 32 M data_route_out [31:0] $end
$var reg 36 N msg_out [35:0] $end
$var reg 1 & valid_req_out $end
$var reg 1 @ valid_route_out $end
$upscope $end
$scope module neigh_port1 $end
$var wire 32 O addr_req_in [31:0] $end
$var wire 1 + clk_in $end
$var wire 36 P data_route_in [35:0] $end
$var wire 1 G req_ready_in $end
$var wire 1 5 rst_in $end
$var wire 1 2 valid_in $end
$var parameter 32 Q DATA_SIZE $end
$var parameter 32 R PROC_BITS $end
$var parameter 4 S PROC_ID $end
$var reg 32 T data_route_out [31:0] $end
$var reg 36 U msg_out [35:0] $end
$var reg 1 ' valid_req_out $end
$var reg 1 ; valid_route_out $end
$upscope $end
$scope module neighbors $end
$var wire 1 + clk_in $end
$var wire 1 4 deq_in $end
$var wire 32 V enq_data_in [31:0] $end
$var wire 1 ' enq_in $end
$var wire 1 5 rst_in $end
$var parameter 32 W DATA_WIDTH $end
$var parameter 32 X DEPTH $end
$var reg 32 Y data_out [31:0] $end
$var reg 1 % empty_out $end
$var reg 1 # full_out $end
$var reg 4 Z read_ptr [3:0] $end
$var reg 1 " valid_out $end
$var reg 4 [ write_ptr [3:0] $end
$scope begin $ivl_for_loop0 $end
$var integer 32 \ i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b1000 X
b100000 W
b0 S
b100 R
b100000 Q
b1 L
b100 K
b100000 J
b10 B
$end
#0
$dumpvars
b0 \
bx [
bx Z
bx Y
bx V
bx U
bx T
b0 P
bx O
bx N
bx M
b0 I
bx H
xG
xF
bx E
bx D
bx C
bx A
x@
bx ?
bx >
bx =
bx <
x;
b0 :
b0 9
b0 8
07
b0 6
05
04
03
02
b0 1
b0 0
x/
x.
bx -
bx ,
0+
x*
bx )
bx (
x'
x&
x%
bx $
x#
x"
x!
$end
#5000
0;
0"
0@
0G
0F
0*
1+
#10000
0+
15
#15000
0#
b0 [
b0 Z
1%
b0 $
b0 =
b0 Y
b0 C
1!
0&
0'
b1000 \
1+
#20000
0+
05
#25000
1+
#30000
0+
b110 0
b110 8
b110 P
12
17
b1 6
b1 :
#35000
b100 E
b100 O
b10 D
b10 H
1;
b0 <
b0 T
b0 V
1+
#40000
0+
07
#45000
1F
b11 D
b11 H
1+
#50000
0+
14
#55000
b100 D
b100 H
1&
b1100000000000000000000000000000100 (
b1100000000000000000000000000000100 >
b1100000000000000000000000000000100 N
1+
#60000
0+
04
#65000
b10000000000000000000000000000000100 (
b10000000000000000000000000000000100 >
b10000000000000000000000000000000100 N
0F
1*
1+
#70000
0+
14
#75000
0&
1+
#80000
0+
04
#85000
1+
#90000
0+
14
#95000
1+
#100000
0+
04
#105000
1+
#110000
0+
#115000
1+
#120000
0+
#125000
1+
#130000
0+
#135000
1+
#140000
0+
#145000
1+
#150000
0+
#155000
1+
#160000
0+
#165000
1+
#170000
0+
#175000
1+
#180000
0+
#185000
1+
#190000
0+
#195000
1+
#200000
0+
#205000
1+
#210000
0+
#215000
1+
#220000
0+
#225000
1+
#230000
0+
#235000
1+
#240000
0+
#245000
1+
#250000
0+
#255000
1+
#260000
0+
#265000
1+
#270000
0+
#275000
1+
#280000
0+
#285000
1+
#290000
0+
#295000
1+
#300000
0+
